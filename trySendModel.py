import pandas as pd
import numpy as np
import streamlit as st
import base64
import matplotlib.pyplot as plt
import matplotlib.backends.backend_pdf as pdf_backend
from sklearn.metrics import mean_absolute_error

# id ==> well name
def switch_case(id_input):
    switcher = {1: 'AR12', 2: 'AR14', 3: 'AR22', 4: 'AR60', 5: 'BBK1', 6: 'BBK11', 7: 'BBK12', 8: 'BBK13', 9: 'BBK14', 10: 'BBK15', 11: 'BBK16', 12: 'BBK17', 13: 'BBK18', 14: 'BBK19', 15: 'BBK2', 16: 'BBK20', 17: 'BBK3', 18: 'BBK4', 19: 'BBK5', 20: 'BBK6', 21: 'BBK7', 22: 'BBK8', 23: 'BBKN11', 24: 'BBKN12', 25: 'BBKN13', 26: 'BBKN17', 27: 'BBKN18', 28: 'BBKN19', 29: 'BBKN2', 30: 'BBKN20', 31: 'BBKN21', 32: 'BBKN3', 33: 'BBKN4', 34: 'BBKN5', 35: 'BBKN7', 36: 'BBKN8', 37: 'BBKP1', 38: 'BBKPNE1', 39: 'BBKPSE1', 40: 'BBR1B', 41: 'BBR2', 42: 'BEK1', 43: 'DAD1', 44: 'DECH13', 45: 'ELB10', 46: 'ELB13', 47: 'ELB14', 48: 'ELB15', 49: 'ELB20', 50: 'ELB22', 51: 'ELB3', 52: 'ELB8', 53: 'ELBI1', 54: 'ERAA1', 55: 'ERAMA1', 56: 'FDF1', 57: 'GKN1', 58: 'GRK1B', 59: 'GS20', 60: 'GS37', 61: 'GS38', 62: 'GS41', 63: 'GS57', 64: 'GS58', 65: 'GS60', 66: 'GS61', 67: 'HBNEP1', 68: 'HBNP1', 69: 'HBNP1B', 70: 'HBNW1', 71: 'HBNW2', 72: 'HDZ10', 73: 'HDZ11', 74: 'HDZ13', 75: 'HDZ14', 76: 'HDZ15', 77: 'HDZ17', 78: 'HDZ19', 79: 'HDZ2', 80: 'HDZ20', 81: 'HDZ21', 82: 'HDZ22', 83: 'HDZ9', 84: 'HDZS1', 85: 'HGA1', 86: 'HGA10', 87: 'HGA11', 88: 'HGA13', 89: 'HGA14', 90: 'HGA15', 91: 'HGA16', 92: 'HGA17', 93: 'HGA18', 94: 'HGA2', 95: 'HGA21', 96: 'HGA22', 97: 'HGA24', 98: 'HGA26', 99: 'HGA28', 100: 'HGA3', 101: 'HGA32', 102: 'HGA33', 103: 'HGA35', 104: 'HGA36', 105: 'HGA38', 106: 'HGA4', 107: 'HGA40', 108: 'HGA41', 109: 'HGA42', 110: 'HGA43', 111: 'HGA44', 112: 'HGA45', 113: 'HGA5', 114: 'HGA6', 115: 'HGA7', 116: 'HGA8', 117: 'HGA9', 118: 'HGANE1', 119: 'HGANE2', 120: 'HGANE3', 121: 'HGANE5', 122: 'HGANE7', 123: 'HGAS10', 124: 'HGAS11', 125: 'HGAS12', 126: 'HGAS13', 127: 'HGAS3', 128: 'HGAS4', 129: 'HGAS5', 130: 'HGAS6', 131: 'HGAS8', 132: 'HGAS9', 133: 'HGAW1', 134: 'HGAW10', 135: 'HGAW11', 136: 'HGAW2', 137: 'HGAW3', 138: 'HGAW4', 139: 'HGAW5', 140: 'HGAW6', 141: 'HGAW7', 142: 'HGAW8', 143: 'HGAW9', 144: 'Hgas39', 145: 'HGI3', 146: 'HGI4', 147: 'HGI5', 148: 'HHT1', 149: 'HKZ4', 150: 'HMGB1', 151: 'HOZ4', 152: 'HOZ5', 153: 'HTB1', 154: 'HTF1', 155: 'HTF10', 156: 'HTF11', 157: 'HTF12', 158: 'HTF13', 159: 'HTF14', 160: 'HTF15', 161: 'HTF16', 162: 'HTF18', 163: 'HTF19', 164: 'HTF2', 165: 'HTF20', 166: 'HTF21', 167: 'HTF22', 168: 'HTF23', 169: 'HTF24', 170: 'HTF25', 171: 'HTF26', 172: 'HTF27', 173: 'HTF28', 174: 'HTF29', 175: 'HTF30', 176: 'HTF31', 177: 'HTF32', 178: 'HTF33', 179: 'HTF35', 180: 'HTF36', 181: 'HTF37', 182: 'HTF4', 183: 'HTF40', 184: 'HTF41', 185: 'HTF42', 186: 'HTFN1', 187: 'HTFN10', 188: 'HTFN11', 189: 'HTFN12', 190: 'HTFN13', 191: 'HTFN14', 192: 'HTFN15', 193: 'HTFN16', 194: 'HTFN2', 195: 'HTFN3', 196: 'HTFN4', 197: 'HTFN5', 198: 'HTFN6', 199: 'HTFN7', 200: 'HTFN8', 201: 'HTFN9', 202: 'HTM2', 203: 'HTZ3', 204: 'HTZ4', 205: 'KENE1', 206: 'KENS1', 207: 'KSK1B', 208: 'KSK2', 209: 'MD1', 210: 'MD10', 211: 'MD100', 212: 'MD101', 213: 'MD102', 214: 'MD103', 215: 'MD104', 216: 'MD105', 217: 'MD106', 218: 'MD107', 219: 'MD108', 220: 'MD108B', 221: 'MD109', 222: 'MD11', 223: 'MD110', 224: 'MD111', 225: 'MD112', 226: 'MD113', 227: 'MD114', 228: 'MD115', 229: 'MD116', 230: 'MD117', 231: 'MD118', 232: 'MD119', 233: 'MD12', 234: 'MD120', 235: 'MD121', 236: 'MD122', 237: 'MD123', 238: 'MD124', 239: 'MD125', 240: 'MD126', 241: 'MD127', 242: 'MD128', 243: 'MD129', 244: 'MD13', 245: 'MD130', 246: 'MD131', 247: 'MD132', 248: 'MD133', 249: 'MD134', 250: 'MD135', 251: 'MD136', 252: 'MD137', 253: 'MD138', 254: 'MD139', 255: 'MD14', 256: 'MD140', 257: 'MD141', 258: 'MD142', 259: 'MD143', 260: 'MD144', 261: 'MD145', 262: 'MD146', 263: 'MD147', 264: 'MD148B', 265: 'MD149', 266: 'MD15', 267: 'MD150', 268: 'MD151', 269: 'MD152', 270: 'MD153', 271: 'MD154', 272: 'MD155', 273: 'MD156', 274: 'MD157', 275: 'MD158', 276: 'MD159', 277: 'MD16', 278: 'MD160', 279: 'MD161', 280: 'MD162', 281: 'MD163', 282: 'MD164', 283: 'MD166', 284: 'MD167', 285: 'MD168', 286: 'MD169', 287: 'MD17', 288: 'MD170', 289: 'MD171', 290: 'MD172', 291: 'MD173', 292: 'MD174', 293: 'MD175', 294: 'MD176', 295: 'MD177', 296: 'MD178', 297: 'MD179', 298: 'MD18', 299: 'MD180', 300: 'MD181', 301: 'MD182', 302: 'MD183', 303: 'MD184', 304: 'MD185', 305: 'MD186', 306: 'MD187', 307: 'MD188', 308: 'MD189', 309: 'MD19', 310: 'MD190', 311: 'MD191', 312: 'MD192', 313: 'MD193', 314: 'MD195', 315: 'MD196', 316: 'MD198', 317: 'MD199', 318: 'MD2', 319: 'MD20', 320: 'MD200', 321: 'MD201', 322: 'MD201B', 323: 'MD202', 324: 'MD203', 325: 'MD204', 326: 'MD205', 327: 'MD207', 328: 'MD208', 329: 'MD209', 330: 'MD209B', 331: 'MD210', 332: 'MD212', 333: 'MD213', 334: 'MD214', 335: 'MD215', 336: 'MD216', 337: 'MD217', 338: 'MD218', 339: 'MD219', 340: 'MD22', 341: 'MD221', 342: 'MD222', 343: 'MD223', 344: 'MD224', 345: 'MD225', 346: 'MD226', 347: 'MD227', 348: 'MD228', 349: 'MD229', 350: 'MD23', 351: 'MD230', 352: 'MD230B', 353: 'MD231', 354: 'MD232', 355: 'MD233', 356: 'MD234', 357: 'MD235', 358: 'MD237', 359: 'MD238', 360: 'MD239', 361: 'MD24', 362: 'MD240', 363: 'MD241', 364: 'MD242', 365: 'MD243', 366: 'MD244', 367: 'MD245', 368: 'MD249', 369: 'MD25', 370: 'MD251', 371: 'MD252', 372: 'MD253', 373: 'MD254', 374: 'MD255', 375: 'MD255B', 376: 'MD256', 377: 'MD257', 378: 'MD258', 379: 'MD259', 380: 'MD26', 381: 'MD260', 382: 'MD261', 383: 'MD262', 384: 'MD263', 385: 'MD264', 386: 'MD265', 387: 'MD265B', 388: 'MD266', 389: 'MD267', 390: 'MD268', 391: 'MD269', 392: 'MD270', 393: 'MD271', 394: 'MD272', 395: 'MD273', 396: 'MD274', 397: 'MD275', 398: 'MD276', 399: 'MD277', 400: 'MD278', 401: 'MD279', 402: 'MD280', 403: 'MD281', 404: 'MD283', 405: 'MD284', 406: 'MD285', 407: 'MD286', 408: 'MD287', 409: 'MD287B', 410: 'MD288', 411: 'MD289', 412: 'MD29', 413: 'MD291', 414: 'MD291B', 415: 'MD292', 416: 'MD293', 417: 'MD294', 418: 'MD295', 419: 'MD296', 420: 'MD297', 421: 'MD298', 422: 'MD299', 423: 'MD3', 424: 'MD30', 425: 'MD300', 426: 'MD301', 427: 'MD302', 428: 'MD303', 429: 'MD304', 430: 'MD305', 431: 'MD306', 432: 'MD307', 433: 'MD308', 434: 'MD309', 435: 'MD31', 436: 'MD310', 437: 'MD311', 438: 'MD312', 439: 'MD312B', 440: 'MD313', 441: 'MD314', 442: 'MD315', 443: 'MD316', 444: 'MD317', 445: 'MD318', 446: 'MD319', 447: 'MD32', 448: 'MD320', 449: 'MD321', 450: 'MD322', 451: 'MD324', 452: 'MD325', 453: 'MD326', 454: 'MD327', 455: 'MD328', 456: 'MD329', 457: 'MD33', 458: 'MD330', 459: 'MD332B', 460: 'MD333', 461: 'MD335', 462: 'MD336', 463: 'MD338', 464: 'MD34', 465: 'MD340', 466: 'MD341', 467: 'MD342', 468: 'MD343', 469: 'MD344', 470: 'MD345', 471: 'MD346', 472: 'MD347', 473: 'MD348', 474: 'MD349', 475: 'MD351', 476: 'MD352', 477: 'MD353', 478: 'MD354', 479: 'MD356', 480: 'MD357', 481: 'MD358', 482: 'MD36', 483: 'MD360', 484: 'MD361', 485: 'MD363', 486: 'MD364', 487: 'MD365', 488: 'MD366', 489: 'MD367', 490: 'MD368', 491: 'MD369', 492: 'MD37', 493: 'MD370', 494: 'MD371', 495: 'MD372', 496: 'MD374B', 497: 'MD375', 498: 'MD376', 499: 'MD377', 500: 'MD378', 501: 'MD379', 502: 'MD38', 503: 'MD380', 504: 'MD382', 505: 'MD383', 506: 'MD384', 507: 'MD385', 508: 'MD386', 509: 'MD387', 510: 'MD389', 511: 'MD39', 512: 'MD390', 513: 'MD391', 514: 'MD392', 515: 'MD393', 516: 'MD396', 517: 'MD397', 518: 'MD398', 519: 'MD399', 520: 'MD4', 521: 'MD40', 522: 'MD400', 523: 'MD401', 524: 'MD402', 525: 'MD403', 526: 'MD404', 527: 'MD405', 528: 'MD406', 529: 'MD407', 530: 'MD408', 531: 'MD409', 532: 'MD41', 533: 'MD410', 534: 'MD411', 535: 'MD412', 536: 'MD412B', 537: 'MD413', 538: 'MD414', 539: 'MD414B', 540: 'MD415', 541: 'MD416', 542: 'MD417', 543: 'MD418', 544: 'MD419', 545: 'MD42', 546: 'MD420', 547: 'MD421', 548: 'MD422', 549: 'MD423', 550: 'MD424', 551: 'MD425', 552: 'MD426', 553: 'MD427', 554: 'MD428', 555: 'MD429', 556: 'MD42B', 557: 'MD43', 558: 'MD430', 559: 'MD431', 560: 'MD433', 561: 'MD434', 562: 'MD435', 563: 'MD436', 564: 'MD437', 565: 'MD438', 566: 'MD439', 567: 'MD44', 568: 'MD440', 569: 'MD441', 570: 'MD443', 571: 'MD444', 572: 'MD445', 573: 'MD445B', 574: 'MD446', 575: 'MD448', 576: 'MD449', 577: 'MD45', 578: 'MD450', 579: 'MD451', 580: 'MD452', 581: 'MD454', 582: 'MD455', 583: 'MD456', 584: 'MD457', 585: 'MD458', 586: 'MD459', 587: 'MD46', 588: 'MD460', 589: 'MD461', 590: 'MD462', 591: 'MD463', 592: 'MD464', 593: 'MD465', 594: 'MD466', 595: 'MD467', 596: 'MD468', 597: 'MD469', 598: 'MD47', 599: 'MD470', 600: 'MD471', 601: 'MD472', 602: 'MD473', 603: 'MD474', 604: 'MD475', 605: 'MD476', 606: 'MD477', 607: 'MD478', 608: 'MD479', 609: 'MD48', 610: 'MD480', 611: 'MD481', 612: 'MD482', 613: 'MD483', 614: 'MD484', 615: 'MD486', 616: 'MD488', 617: 'MD489', 618: 'MD49', 619: 'MD490', 620: 'MD493', 621: 'MD494', 622: 'MD495', 623: 'MD496', 624: 'MD497', 625: 'MD498', 626: 'MD499', 627: 'MD5', 628: 'MD50', 629: 'MD502', 630: 'MD503', 631: 'MD505', 632: 'MD506', 633: 'MD507', 634: 'MD508', 635: 'MD51', 636: 'MD511', 637: 'MD512', 638: 'MD513', 639: 'MD514', 640: 'MD515', 641: 'MD516', 642: 'MD517', 643: 'MD518', 644: 'MD519', 645: 'MD52', 646: 'MD520', 647: 'MD521', 648: 'MD522', 649: 'MD524', 650: 'MD525', 651: 'MD526', 652: 'MD529', 653: 'MD53', 654: 'MD530', 655: 'MD531', 656: 'MD54', 657: 'MD56', 658: 'MD57', 659: 'MD571', 660: 'MD575', 661: 'MD58', 662: 'MD584', 663: 'MD59', 664: 'MD590', 665: 'MD597', 666: 'MD599', 667: 'MD6', 668: 'MD60', 669: 'MD600', 670: 'MD601', 671: 'MD607', 672: 'MD609', 673: 'MD610', 674: 'MD611', 675: 'MD612', 676: 'MD614', 677: 'MD617', 678: 'MD619', 679: 'MD62', 680: 'MD620', 681: 'MD621', 682: 'MD628', 683: 'MD629', 684: 'MD630', 685: 'MD632', 686: 'MD633', 687: 'MD634', 688: 'MD635', 689: 'MD636', 690: 'MD637', 691: 'MD638', 692: 'MD639', 693: 'MD64', 694: 'MD640', 695: 'MD641', 696: 'MD643', 697: 'MD644', 698: 'MD645', 699: 'MD646', 700: 'MD647', 701: 'MD648', 702: 'MD65', 703: 'MD650', 704: 'MD652', 705: 'MD653', 706: 'MD654', 707: 'MD655', 708: 'MD659', 709: 'MD66', 710: 'MD660', 711: 'MD662', 712: 'MD665', 713: 'MD666', 714: 'MD668', 715: 'MD675', 716: 'MD676', 717: 'MD678', 718: 'MD679', 719: 'MD68', 720: 'MD680', 721: 'MD682', 722: 'MD683', 723: 'MD685', 724: 'MD687', 725: 'MD688', 726: 'MD689', 727: 'MD69', 728: 'MD691', 729: 'MD692', 730: 'MD693', 731: 'MD694', 732: 'MD695', 733: 'MD697', 734: 'MD699', 735: 'MD6B', 736: 'MD7', 737: 'MD702', 738: 'MD705', 739: 'MD707', 740: 'MD709', 741: 'MD71', 742: 'MD710', 743: 'MD711', 744: 'MD712', 745: 'MD714', 746: 'MD715', 747: 'MD716', 748: 'MD718', 749: 'MD72', 750: 'MD720', 751: 'MD721', 752: 'MD722', 753: 'MD723', 754: 'MD726', 755: 'MD727', 756: 'MD728', 757: 'MD730', 758: 'MD732', 759: 'MD736', 760: 'MD738', 761: 'MD739', 762: 'MD74', 763: 'MD740', 764: 'MD741', 765: 'MD742', 766: 'MD743', 767: 'MD745', 768: 'MD746', 769: 'MD75', 770: 'MD750', 771: 'MD752', 772: 'MD754', 773: 'MD756', 774: 'MD760', 775: 'MD763', 776: 'MD765', 777: 'MD766', 778: 'MD77', 779: 'MD772', 780: 'MD773', 781: 'MD775', 782: 'MD777', 783: 'MD778', 784: 'MD78', 785: 'MD780', 786: 'MD781', 787: 'MD783', 788: 'MD788', 789: 'MD791', 790: 'MD792', 791: 'MD80', 792: 'MD81', 793: 'MD82', 794: 'MD84', 795: 'MD85', 796: 'MD86', 797: 'MD87', 798: 'MD88', 799: 'MD89', 800: 'MD8TER', 801: 'MD9', 802: 'MD90', 803: 'MD92', 804: 'MD93', 805: 'MD94', 806: 'MD95', 807: 'MD96', 808: 'MD97', 809: 'MD98', 810: 'MD99', 811: 'MDR10', 812: 'MDR14', 813: 'MDR15B', 814: 'MDR17B', 815: 'MDR18', 816: 'MDR21B', 817: 'MDR22', 818: 'MDR23', 819: 'MDR7', 820: 'MDR8', 821: 'MDR9', 822: 'MDRW1', 823: 'MDZ453', 824: 'MDZ453D1', 825: 'MDZ453R2', 826: 'MDZ491', 827: 'MDZ492', 828: 'MDZ501', 829: 'MDZ509', 830: 'MDZ510', 831: 'MDZ532', 832: 'MDZ533', 833: 'MDZ534', 834: 'MDZ535', 835: 'MDZ537', 836: 'MDZ538', 837: 'MDZ539', 838: 'MDZ540', 839: 'MDZ541', 840: 'MDZ542', 841: 'MDZ543', 842: 'MDZ544', 843: 'MDZ545', 844: 'MDZ546', 845: 'MDZ547', 846: 'MDZ548', 847: 'MDZ549', 848: 'MDZ550', 849: 'MDZ551', 850: 'MDZ552', 851: 'MDZ553', 852: 'MDZ554', 853: 'MDZ555', 854: 'MDZ556', 855: 'MDZ557', 856: 'MDZ558', 857: 'MDZ559', 858: 'MDZ560', 859: 'MDZ561', 860: 'MDZ562', 861: 'MDZ563', 862: 'MDZ564', 863: 'MDZ565', 864: 'MDZ566', 865: 'MDZ567', 866: 'MDZ568', 867: 'MDZ572', 868: 'MDZ573', 869: 'MDZ574', 870: 'MDZ576', 871: 'MDZ577', 872: 'MDZ579', 873: 'MDZ581', 874: 'MDZ583', 875: 'MDZ585', 876: 'MDZ586', 877: 'MDZ587', 878: 'MDZ588', 879: 'MDZ592', 880: 'MDZ595', 881: 'MDZ602', 882: 'MDZ603', 883: 'MDZ605', 884: 'MDZ606', 885: 'MDZ608', 886: 'MDZ615', 887: 'MDZ616', 888: 'MDZ618', 889: 'MDZ622', 890: 'MDZ623', 891: 'MDZ625', 892: 'MDZ626', 893: 'MDZ627', 894: 'MDZ631', 895: 'MDZ642', 896: 'MDZ649', 897: 'MDZ651', 898: 'MDZ656', 899: 'MDZ657', 900: 'MDZ661', 901: 'MDZ663', 902: 'MDZ664', 903: 'MDZ667', 904: 'MDZ669', 905: 'MDZ670', 906: 'MDZ671', 907: 'MDZ672', 908: 'MDZ674B', 909: 'MDZ677', 910: 'MDZ686', 911: 'MDZ690', 912: 'MDZ700', 913: 'MDZ701', 914: 'MDZ703', 915: 'MDZ704', 916: 'MDZ706', 917: 'MDZ708', 918: 'MDZ713', 919: 'MDZ717', 920: 'MDZ719', 921: 'MDZ724', 922: 'MDZ725', 923: 'MDZ729', 924: 'MDZ731', 925: 'MDZ733', 926: 'MDZ734', 927: 'MDZ735', 928: 'MDZ751', 929: 'MDZ753', 930: 'MDZ757', 931: 'MDZ758', 932: 'MDZ767', 933: 'MDZ768', 934: 'MDZ769', 935: 'MDZ770', 936: 'MDZ776', 937: 'MDZ782', 938: 'MDZ784', 939: 'MDZ785', 940: 'MDZ786', 941: 'MDZ793', 942: 'MDZ794', 943: 'MDZ795', 944: 'NBRW1', 945: 'NHBHJ1', 946: 'NHGAW1', 947: 'NRAA1', 948: 'NRAA2', 949: 'OEC1', 950: 'OEN1', 951: 'OKM1', 952: 'OL2', 953: 'OL6', 954: 'OM1', 955: 'OM6', 956: 'OM7', 957: 'OMF502', 958: 'OMF84', 959: 'OMG102', 960: 'OMG20', 961: 'OMG222', 962: 'OMG303', 963: 'OMG402', 964: 'OMG501', 965: 'OMG502', 966: 'OMG503', 967: 'OMG51', 968: 'OMG512', 969: 'OMG513', 970: 'OMG601', 971: 'OMG61', 972: 'OMG711', 973: 'OMG723', 974: 'OMG73', 975: 'OMG74', 976: 'OMG812', 977: 'OMG82', 978: 'OMG823', 979: 'OMG832', 980: 'OMGZ403', 981: 'OMGZ801', 982: 'OMGZ802', 983: 'OMGZ81', 984: 'OMGZ811', 985: 'OMGZ813', 986: 'OMGZ822', 987: 'OMH121', 988: 'OMH46', 989: 'OMH511', 990: 'OMH751', 991: 'OMH81', 992: 'OMI373', 993: 'OMI813', 994: 'OMI82', 995: 'OMIZ821', 996: 'OMJ111', 997: 'OMJ22', 998: 'OMJ223', 999: 'OMJ24', 1000: 'OMJ301', 1001: 'OMJ313', 1002: 'OMJ323', 1003: 'OMJ33', 1004: 'OMJ333', 1005: 'OMJ401', 1006: 'OMJ41', 1007: 'OMJ422', 1008: 'OMJ431', 1009: 'OMJ433', 1010: 'OMJ443', 1011: 'OMJ512', 1012: 'OMJ552', 1013: 'OMJ60', 1014: 'OMJ61', 1015: 'OMJ62', 1016: 'OMJ64', 1017: 'OMJ642', 1018: 'OMJ66', 1019: 'OMJ661', 1020: 'OMJ67', 1021: 'OMJ701', 1022: 'OMJ702', 1023: 'OMJ702B', 1024: 'OMJ703', 1025: 'OMJ71', 1026: 'OMJ712', 1027: 'OMJ713', 1028: 'OMJ72', 1029: 'OMJ721', 1030: 'OMJ723', 1031: 'OMJ73', 1032: 'OMJ73B', 1033: 'OMJ74', 1034: 'OMJ743', 1035: 'OMJ763', 1036: 'OMJ77', 1037: 'OMJ771', 1038: 'OMJ802', 1039: 'OMJ802B', 1040: 'OMJ81', 1041: 'OMJ811', 1042: 'OMJ812', 1043: 'OMJ82', 1044: 'OMJ822', 1045: 'OMJ83', 1046: 'OMJ832', 1047: 'OMJZ121', 1048: 'OMJZ201', 1049: 'OMJZ203', 1050: 'OMJZ21', 1051: 'OMJZ302', 1052: 'OMJZ311', 1053: 'OMJZ32', 1054: 'OMJZ332', 1055: 'OMJZ441', 1056: 'OMJZ502', 1057: 'OMJZ52', 1058: 'OMJZ532', 1059: 'OMJZ622', 1060: 'OMJZ633', 1061: 'OMJZ65', 1062: 'OMJZ652', 1063: 'OMJZ742', 1064: 'OMJZ751', 1065: 'OMJZ761', 1066: 'OMJZ813', 1067: 'OMJZ842', 1068: 'OMJZ843', 1069: 'OMJZ85', 1070: 'OMJZ86', 1071: 'OMK102', 1072: 'OMK11', 1073: 'OMK112', 1074: 'OMK12', 1075: 'OMK122', 1076: 'OMK13', 1077: 'OMK131', 1078: 'OMK132', 1079: 'OMK14', 1080: 'OMK141', 1081: 'OMK142', 1082: 'OMK152', 1083: 'OMK16', 1084: 'OMK243', 1085: 'OMK25', 1086: 'OMK27', 1087: 'OMK31', 1088: 'OMK333', 1089: 'OMK35', 1090: 'OMK422', 1091: 'OMK463', 1092: 'OMK57', 1093: 'OMK572', 1094: 'OMK573', 1095: 'OMK60', 1096: 'OMK62', 1097: 'OMK623', 1098: 'OMK64', 1099: 'OMK71', 1100: 'OMK81', 1101: 'OMK841', 1102: 'OMK842', 1103: 'OMK843', 1104: 'OMKZ103', 1105: 'OMKZ121', 1106: 'OMKZ15', 1107: 'OMKZ153', 1108: 'OMKZ202', 1109: 'OMKZ212', 1110: 'OMKZ221', 1111: 'OMKZ232', 1112: 'OMKZ241', 1113: 'OMKZ251', 1114: 'OMKZ253', 1115: 'OMKZ262', 1116: 'OMKZ303', 1117: 'OMKZ311', 1118: 'OMKZ32', 1119: 'OMKZ332', 1120: 'OMKZ341', 1121: 'OMKZ353', 1122: 'OMKZ36', 1123: 'OMKZ372', 1124: 'OMKZ411', 1125: 'OMKZ413', 1126: 'OMKZ421', 1127: 'OMKZ433', 1128: 'OMKZ441', 1129: 'OMKZ442', 1130: 'OMKZ45', 1131: 'OMKZ46', 1132: 'OMKZ502', 1133: 'OMKZ522B', 1134: 'OMKZ552', 1135: 'OMKZ56', 1136: 'OMKZ601', 1137: 'OMKZ611', 1138: 'OMKZ612', 1139: 'OMKZ643', 1140: 'OMKZ672', 1141: 'OMKZ702', 1142: 'OMKZ712', 1143: 'OMKZ72', 1144: 'OMKZ751', 1145: 'OMKZ77', 1146: 'OMKZ773', 1147: 'OMKZ811', 1148: 'OMKZ821', 1149: 'OMKZ822', 1150: 'OMKZ823', 1151: 'OMKZ83', 1152: 'OMKZ831', 1153: 'OMKZ85', 1154: 'OMKZ873', 1155: 'OML103', 1156: 'OML11', 1157: 'OML113', 1158: 'OML121', 1159: 'OML12B', 1160: 'OML13', 1161: 'OML16', 1162: 'OML202', 1163: 'OML21', 1164: 'OML30', 1165: 'OML301', 1166: 'OML31', 1167: 'OML35', 1168: 'OML41', 1169: 'OML42', 1170: 'OML422', 1171: 'OML43', 1172: 'OML431', 1173: 'OML51', 1174: 'OML52', 1175: 'OML53', 1176: 'OML532', 1177: 'OML55', 1178: 'OML602', 1179: 'OML61', 1180: 'OML623', 1181: 'OML62B', 1182: 'OML63', 1183: 'OML633', 1184: 'OML65', 1185: 'OML712', 1186: 'OML72', 1187: 'OML721', 1188: 'OML72B', 1189: 'OML73', 1190: 'OML733', 1191: 'OML75B', 1192: 'OML76', 1193: 'OML813', 1194: 'OML82', 1195: 'OML822', 1196: 'OML832', 1197: 'OML83B', 1198: 'OML84', 1199: 'OML85', 1200: 'OML852', 1201: 'OML86', 1202: 'OML862', 1203: 'OMLZ133', 1204: 'OMLZ173', 1205: 'OMLZ233', 1206: 'OMLZ262', 1207: 'OMLZ272', 1208: 'OMLZ313', 1209: 'OMLZ321', 1210: 'OMLZ322', 1211: 'OMLZ33', 1212: 'OMLZ351', 1213: 'OMLZ36', 1214: 'OMLZ362', 1215: 'OMLZ402', 1216: 'OMLZ432', 1217: 'OMLZ442', 1218: 'OMLZ45', 1219: 'OMLZ452', 1220: 'OMLZ453', 1221: 'OMLZ512', 1222: 'OMLZ562', 1223: 'OMLZ572', 1224: 'OMLZ573', 1225: 'OMLZ632', 1226: 'OMLZ643', 1227: 'OMLZ651', 1228: 'OMLZ652', 1229: 'OMLZ662', 1230: 'OMLZ67', 1231: 'OMLZ752', 1232: 'OMLZ761', 1233: 'OMLZ763', 1234: 'OMLZ78', 1235: 'OMLZ87', 1236: 'OMLZ872', 1237: 'OMM202', 1238: 'OMM21', 1239: 'OMM30', 1240: 'OMM302', 1241: 'OMM302B', 1242: 'OMM31', 1243: 'OMM32', 1244: 'OMM33', 1245: 'OMM40', 1246: 'OMM402', 1247: 'OMM41', 1248: 'OMM412', 1249: 'OMM413', 1250: 'OMM422', 1251: 'OMM50', 1252: 'OMM502', 1253: 'OMM51', 1254: 'OMM512', 1255: 'OMM532', 1256: 'OMM54', 1257: 'OMM542', 1258: 'OMM62', 1259: 'OMM622', 1260: 'OMM643', 1261: 'OMM652', 1262: 'OMM66', 1263: 'OMM662', 1264: 'OMM67', 1265: 'OMM71', 1266: 'OMM731', 1267: 'OMM741', 1268: 'OMM75', 1269: 'OMM763', 1270: 'OMM772', 1271: 'OMM80', 1272: 'OMM803', 1273: 'OMM81', 1274: 'OMM812', 1275: 'OMM823', 1276: 'OMM842', 1277: 'OMM85', 1278: 'OMMZ212', 1279: 'OMMZ533', 1280: 'OMMZ653', 1281: 'OMMZ733', 1282: 'OMMZ751', 1283: 'OMMZ77', 1284: 'OMMZ773', 1285: 'OMMZ801', 1286: 'OMN10', 1287: 'OMN12', 1288: 'OMN14', 1289: 'OMN202', 1290: 'OMN203', 1291: 'OMN21', 1292: 'OMN212', 1293: 'OMN22', 1294: 'OMN24', 1295: 'OMN243', 1296: 'OMN25', 1297: 'OMN251', 1298: 'OMN261', 1299: 'OMN262', 1300: 'OMN302', 1301: 'OMN31', 1302: 'OMN312', 1303: 'OMN322', 1304: 'OMN33', 1305: 'OMN332', 1306: 'OMN341', 1307: 'OMN342', 1308: 'OMN35', 1309: 'OMN352', 1310: 'OMN40', 1311: 'OMN402', 1312: 'OMN41', 1313: 'OMN412', 1314: 'OMN413', 1315: 'OMN42', 1316: 'OMN422', 1317: 'OMN423', 1318: 'OMN43', 1319: 'OMN432', 1320: 'OMN442', 1321: 'OMN443', 1322: 'OMN451', 1323: 'OMN452', 1324: 'OMN471', 1325: 'OMN522', 1326: 'OMN53', 1327: 'OMN533', 1328: 'OMN541', 1329: 'OMN542', 1330: 'OMN543', 1331: 'OMN55', 1332: 'OMN563', 1333: 'OMN56B', 1334: 'OMN573', 1335: 'OMN601', 1336: 'OMN61', 1337: 'OMN62', 1338: 'OMN622', 1339: 'OMN63', 1340: 'OMN641', 1341: 'OMN653', 1342: 'OMN662', 1343: 'OMN67', 1344: 'OMN671', 1345: 'OMN68', 1346: 'OMN681B', 1347: 'OMN70', 1348: 'OMN702', 1349: 'OMN71', 1350: 'OMN72', 1351: 'OMN73', 1352: 'OMN733', 1353: 'OMN75', 1354: 'OMN76', 1355: 'OMN761', 1356: 'OMN762', 1357: 'OMN763', 1358: 'OMN77', 1359: 'OMN77B', 1360: 'OMN78', 1361: 'OMN781', 1362: 'OMN80', 1363: 'OMN802', 1364: 'OMN812', 1365: 'OMN82', 1366: 'OMN822', 1367: 'OMN82B', 1368: 'OMN84', 1369: 'OMN852', 1370: 'OMN853B', 1371: 'OMN862', 1372: 'OMN871', 1373: 'OMN872', 1374: 'OMN873', 1375: 'OMN88', 1376: 'OMNZ102', 1377: 'OMNZ132', 1378: 'OMNZ133', 1379: 'OMNZ142', 1380: 'OMNZ153', 1381: 'OMNZ232', 1382: 'OMNZ242', 1383: 'OMNZ252', 1384: 'OMNZ271', 1385: 'OMNZ273', 1386: 'OMNZ362', 1387: 'OMNZ47', 1388: 'OMNZ572', 1389: 'OMNZ65', 1390: 'OMNZ701', 1391: 'OMNZ703', 1392: 'OMNZ83', 1393: 'OMNZ833', 1394: 'OMNZ842', 1395: 'OMO10', 1396: 'OMO112', 1397: 'OMO13', 1398: 'OMO132', 1399: 'OMO133', 1400: 'OMO141', 1401: 'OMO142', 1402: 'OMO15', 1403: 'OMO151', 1404: 'OMO152', 1405: 'OMO16', 1406: 'OMO162', 1407: 'OMO163', 1408: 'OMO17', 1409: 'OMO172', 1410: 'OMO173', 1411: 'OMO212', 1412: 'OMO242', 1413: 'OMO24B', 1414: 'OMO25', 1415: 'OMO252', 1416: 'OMO26', 1417: 'OMO27', 1418: 'OMO272', 1419: 'OMO31', 1420: 'OMO323', 1421: 'OMO33', 1422: 'OMO341', 1423: 'OMO342', 1424: 'OMO343', 1425: 'OMO35', 1426: 'OMO351', 1427: 'OMO352', 1428: 'OMO353', 1429: 'OMO354', 1430: 'OMO36', 1431: 'OMO361', 1432: 'OMO362', 1433: 'OMO363', 1434: 'OMO364', 1435: 'OMO37', 1436: 'OMO38', 1437: 'OMO403', 1438: 'OMO42', 1439: 'OMO442', 1440: 'OMO45', 1441: 'OMO452', 1442: 'OMO46', 1443: 'OMO462', 1444: 'OMO47', 1445: 'OMO473', 1446: 'OMO48', 1447: 'OMO502', 1448: 'OMO51', 1449: 'OMO521', 1450: 'OMO53', 1451: 'OMO61', 1452: 'OMO62', 1453: 'OMO70', 1454: 'OMO701', 1455: 'OMO712', 1456: 'OMO72', 1457: 'OMO74', 1458: 'OMO741', 1459: 'OMO742', 1460: 'OMO75', 1461: 'OMO751', 1462: 'OMO752', 1463: 'OMO761', 1464: 'OMO763', 1465: 'OMO773', 1466: 'OMO78', 1467: 'OMO822', 1468: 'OMO82B', 1469: 'OMO83', 1470: 'OMO85', 1471: 'OMO852', 1472: 'OMO86', 1473: 'OMO862', 1474: 'OMO87', 1475: 'OMO87B', 1476: 'OMO88', 1477: 'OMOZ12', 1478: 'OMOZ131', 1479: 'OMOZ22', 1480: 'OMOZ222', 1481: 'OMOZ232', 1482: 'OMOZ273', 1483: 'OMOZ322', 1484: 'OMOZ333', 1485: 'OMOZ411', 1486: 'OMOZ422', 1487: 'OMOZ44', 1488: 'OMOZ441', 1489: 'OMOZ463', 1490: 'OMOZ472', 1491: 'OMOZ511', 1492: 'OMOZ522', 1493: 'OMOZ523', 1494: 'OMOZ543', 1495: 'OMOZ562', 1496: 'OMOZ631', 1497: 'OMOZ632', 1498: 'OMOZ64', 1499: 'OMOZ642', 1500: 'OMOZ662', 1501: 'OMOZ733', 1502: 'OMOZ801', 1503: 'OMOZ821', 1504: 'OMOZ833', 1505: 'OMOZ84B', 1506: 'OMP11', 1507: 'OMP141', 1508: 'OMP142', 1509: 'OMP142B', 1510: 'OMP143', 1511: 'OMP153', 1512: 'OMP16', 1513: 'OMP17', 1514: 'OMP172', 1515: 'OMP18', 1516: 'OMP20', 1517: 'OMP21', 1518: 'OMP21B', 1519: 'OMP22', 1520: 'OMP222', 1521: 'OMP233', 1522: 'OMP241', 1523: 'OMP262', 1524: 'OMP263', 1525: 'OMP272', 1526: 'OMP273', 1527: 'OMP273B', 1528: 'OMP30D', 1529: 'OMP31', 1530: 'OMP312', 1531: 'OMP32', 1532: 'OMP33', 1533: 'OMP371', 1534: 'OMP373', 1535: 'OMP41', 1536: 'OMP412', 1537: 'OMP42', 1538: 'OMP42B', 1539: 'OMP43', 1540: 'OMP46', 1541: 'OMP461', 1542: 'OMP47', 1543: 'OMP52', 1544: 'OMP522', 1545: 'OMP53', 1546: 'OMP56', 1547: 'OMP57', 1548: 'OMP572', 1549: 'OMP58', 1550: 'OMP58B', 1551: 'OMP61', 1552: 'OMP62', 1553: 'OMP632B', 1554: 'OMP64', 1555: 'OMP642', 1556: 'OMP65', 1557: 'OMP651', 1558: 'OMP652', 1559: 'OMP67', 1560: 'OMP672', 1561: 'OMP68', 1562: 'OMP70', 1563: 'OMP702', 1564: 'OMP71', 1565: 'OMP712', 1566: 'OMP72', 1567: 'OMP721', 1568: 'OMP722', 1569: 'OMP73', 1570: 'OMP74', 1571: 'OMP742', 1572: 'OMP75', 1573: 'OMP761', 1574: 'OMP762', 1575: 'OMP763', 1576: 'OMP772', 1577: 'OMP78', 1578: 'OMP80', 1579: 'OMP802', 1580: 'OMP811', 1581: 'OMP83', 1582: 'OMP832', 1583: 'OMP84', 1584: 'OMP843', 1585: 'OMP85', 1586: 'OMP862', 1587: 'OMPZ111', 1588: 'OMPZ113', 1589: 'OMPZ12', 1590: 'OMPZ123', 1591: 'OMPZ173', 1592: 'OMPZ253', 1593: 'OMPZ261', 1594: 'OMPZ331', 1595: 'OMPZ332', 1596: 'OMPZ34', 1597: 'OMPZ341', 1598: 'OMPZ36', 1599: 'OMPZ362', 1600: 'OMPZ442', 1601: 'OMPZ451', 1602: 'OMPZ462', 1603: 'OMPZ463', 1604: 'OMPZ473', 1605: 'OMPZ541', 1606: 'OMPZ552', 1607: 'OMPZ553', 1608: 'OMPZ812', 1609: 'OMPZ82', 1610: 'ONE232', 1611: 'ONI122', 1612: 'ONI13', 1613: 'ONI132', 1614: 'ONI171', 1615: 'ONI211', 1616: 'ONI23', 1617: 'ONI233', 1618: 'ONI31', 1619: 'ONI313', 1620: 'ONI321', 1621: 'ONI333', 1622: 'ONI34', 1623: 'ONI341', 1624: 'ONI343', 1625: 'ONI353', 1626: 'ONI403', 1627: 'ONI412', 1628: 'ONI441', 1629: 'ONI442', 1630: 'ONI45', 1631: 'ONI451', 1632: 'ONI452', 1633: 'ONI453', 1634: 'ONI501', 1635: 'ONI511', 1636: 'ONI523', 1637: 'ONI54', 1638: 'ONI551', 1639: 'ONI572', 1640: 'ONI642', 1641: 'ONIZ203', 1642: 'ONIZ252', 1643: 'ONIZ301', 1644: 'ONIZ303', 1645: 'ONIZ312', 1646: 'ONIZ323', 1647: 'ONIZ40', 1648: 'ONIZ402', 1649: 'ONIZ411', 1650: 'ONIZ413', 1651: 'ONIZ421', 1652: 'ONIZ422', 1653: 'ONIZ423', 1654: 'ONIZ432', 1655: 'ONIZ502', 1656: 'ONIZ541', 1657: 'ONIZ632', 1658: 'ONM11', 1659: 'ONM12', 1660: 'ONM13', 1661: 'ONM131', 1662: 'ONM13_', 1663: 'ONM141', 1664: 'ONM142', 1665: 'ONM15', 1666: 'ONM152', 1667: 'ONM21', 1668: 'ONM212', 1669: 'ONM22', 1670: 'ONM221', 1671: 'ONM222', 1672: 'ONM223', 1673: 'ONM23', 1674: 'ONM232', 1675: 'ONM233', 1676: 'ONM24', 1677: 'ONM241', 1678: 'ONM243', 1679: 'ONM25', 1680: 'ONM25B', 1681: 'ONM26', 1682: 'ONM32', 1683: 'ONM33', 1684: 'ONM331', 1685: 'ONM332', 1686: 'ONM34', 1687: 'ONM342', 1688: 'ONM35', 1689: 'ONM351', 1690: 'ONM352', 1691: 'ONM36', 1692: 'ONM362', 1693: 'ONM363', 1694: 'ONM372', 1695: 'ONM422', 1696: 'ONM442', 1697: 'ONM451', 1698: 'ONM452', 1699: 'ONM461', 1700: 'ONM463', 1701: 'ONM471', 1702: 'ONM541', 1703: 'ONM543', 1704: 'ONM61', 1705: 'ONM642', 1706: 'ONM65', 1707: 'ONM651', 1708: 'ONM75', 1709: 'ONMZ103', 1710: 'ONMZ133', 1711: 'ONMZ143', 1712: 'ONMZ153', 1713: 'ONMZ201', 1714: 'ONMZ263', 1715: 'ONMZ27', 1716: 'ONMZ303', 1717: 'ONMZ313', 1718: 'ONMZ333', 1719: 'ONMZ343', 1720: 'ONMZ37', 1721: 'ONMZ443', 1722: 'ONMZ473', 1723: 'ONMZ502', 1724: 'ONMZ503', 1725: 'ONMZ513', 1726: 'ONMZ561', 1727: 'ONMZ572', 1728: 'ONMZ712', 1729: 'RAA1', 1730: 'RAA2', 1731: 'RAA3', 1732: 'RAA5', 1733: 'RAMA1', 1734: 'RDBN1', 1735: 'RDBW1', 1736: 'RDC1', 1737: 'RDC11', 1738: 'RDC12', 1739: 'RDC14', 1740: 'RDC15', 1741: 'RDC16', 1742: 'RDC17', 1743: 'RDC18', 1744: 'RDC19', 1745: 'RDC1B', 1746: 'RDC20', 1747: 'RDC21', 1748: 'RDC22', 1749: 'RDC23', 1750: 'RDC24', 1751: 'RDC25', 1752: 'RDC26', 1753: 'RDC27', 1754: 'RDC4', 1755: 'RDC6', 1756: 'RDC8', 1757: 'RDC9', 1758: 'RDOM1', 1759: 'RECN1', 1760: 'RECS1', 1761: 'RECSWS1', 1762: 'RHB1', 1763: 'RHB2', 1764: 'RRBN1', 1765: 'RRBNW1', 1766: 'RRBS1', 1767: 'RRBSE1', 1768: 'RRBSW1', 1769: 'RTB1', 1770: 'SAIS1', 1771: 'SBBR1', 1772: 'SFEXT1', 1773: 'SFEXT3', 1774: 'SFPSW1', 1775: 'SFPW2', 1776: 'SHHT1', 1777: 'SRAMA1', 1778: 'TA1', 1779: 'TNKW304', 1780: 'WBEK1', 1781: 'WRDC1', 1782: 'WRDC2B', 1783: 'ZAM1', 1784: 'ZES1', 1785: 'ZES2', 1786: 'ZES3'}
    return switcher.get(id_input, 'No match found')

# well name ==> id
def inverse_switch_case(well_name):
    switcher = {'AR12': 1, 'AR14': 2, 'AR22': 3, 'AR60': 4, 'BBK1': 5, 'BBK11': 6, 'BBK12': 7, 'BBK13': 8, 'BBK14': 9, 'BBK15': 10, 'BBK16': 11, 'BBK17': 12, 'BBK18': 13, 'BBK19': 14, 'BBK2': 15, 'BBK20': 16, 'BBK3': 17, 'BBK4': 18, 'BBK5': 19, 'BBK6': 20, 'BBK7': 21, 'BBK8': 22, 'BBKN11': 23, 'BBKN12': 24, 'BBKN13': 25, 'BBKN17': 26, 'BBKN18': 27, 'BBKN19': 28, 'BBKN2': 29, 'BBKN20': 30, 'BBKN21': 31, 'BBKN3': 32, 'BBKN4': 33, 'BBKN5': 34, 'BBKN7': 35, 'BBKN8': 36, 'BBKP1': 37, 'BBKPNE1': 38, 'BBKPSE1': 39, 'BBR1B': 40, 'BBR2': 41, 'BEK1': 42, 'DAD1': 43, 'DECH13': 44, 'ELB10': 45, 'ELB13': 46, 'ELB14': 47, 'ELB15': 48, 'ELB20': 49, 'ELB22': 50, 'ELB3': 51, 'ELB8': 52, 'ELBI1': 53, 'ERAA1': 54, 'ERAMA1': 55, 'FDF1': 56, 'GKN1': 57, 'GRK1B': 58, 'GS20': 59, 'GS37': 60, 'GS38': 61, 'GS41': 62, 'GS57': 63, 'GS58': 64, 'GS60': 65, 'GS61': 66, 'HBNEP1': 67, 'HBNP1': 68, 'HBNP1B': 69, 'HBNW1': 70, 'HBNW2': 71, 'HDZ10': 72, 'HDZ11': 73, 'HDZ13': 74, 'HDZ14': 75, 'HDZ15': 76, 'HDZ17': 77, 'HDZ19': 78, 'HDZ2': 79, 'HDZ20': 80, 'HDZ21': 81, 'HDZ22': 82, 'HDZ9': 83, 'HDZS1': 84, 'HGA1': 85, 'HGA10': 86, 'HGA11': 87, 'HGA13': 88, 'HGA14': 89, 'HGA15': 90, 'HGA16': 91, 'HGA17': 92, 'HGA18': 93, 'HGA2': 94, 'HGA21': 95, 'HGA22': 96, 'HGA24': 97, 'HGA26': 98, 'HGA28': 99, 'HGA3': 100, 'HGA32': 101, 'HGA33': 102, 'HGA35': 103, 'HGA36': 104, 'HGA38': 105, 'HGA4': 106, 'HGA40': 107, 'HGA41': 108, 'HGA42': 109, 'HGA43': 110, 'HGA44': 111, 'HGA45': 112, 'HGA5': 113, 'HGA6': 114, 'HGA7': 115, 'HGA8': 116, 'HGA9': 117, 'HGANE1': 118, 'HGANE2': 119, 'HGANE3': 120, 'HGANE5': 121, 'HGANE7': 122, 'HGAS10': 123, 'HGAS11': 124, 'HGAS12': 125, 'HGAS13': 126, 'HGAS3': 127, 'HGAS4': 128, 'HGAS5': 129, 'HGAS6': 130, 'HGAS8': 131, 'HGAS9': 132, 'HGAW1': 133, 'HGAW10': 134, 'HGAW11': 135, 'HGAW2': 136, 'HGAW3': 137, 'HGAW4': 138, 'HGAW5': 139, 'HGAW6': 140, 'HGAW7': 141, 'HGAW8': 142, 'HGAW9': 143, 'HGAZ39': 144, 'HGI3': 145, 'HGI4': 146, 'HGI5': 147, 'HHT1': 148, 'HKZ4': 149, 'HMGB1': 150, 'HOZ4': 151, 'HOZ5': 152, 'HTB1': 153, 'HTF1': 154, 'HTF10': 155, 'HTF11': 156, 'HTF12': 157, 'HTF13': 158, 'HTF14': 159, 'HTF15': 160, 'HTF16': 161, 'HTF18': 162, 'HTF19': 163, 'HTF2': 164, 'HTF20': 165, 'HTF21': 166, 'HTF22': 167, 'HTF23': 168, 'HTF24': 169, 'HTF25': 170, 'HTF26': 171, 'HTF27': 172, 'HTF28': 173, 'HTF29': 174, 'HTF30': 175, 'HTF31': 176, 'HTF32': 177, 'HTF33': 178, 'HTF35': 179, 'HTF36': 180, 'HTF37': 181, 'HTF4': 182, 'HTF40': 183, 'HTF41': 184, 'HTF42': 185, 'HTFN1': 186, 'HTFN10': 187, 'HTFN11': 188, 'HTFN12': 189, 'HTFN13': 190, 'HTFN14': 191, 'HTFN15': 192, 'HTFN16': 193, 'HTFN2': 194, 'HTFN3': 195, 'HTFN4': 196, 'HTFN5': 197, 'HTFN6': 198, 'HTFN7': 199, 'HTFN8': 200, 'HTFN9': 201, 'HTM2': 202, 'HTZ3': 203, 'HTZ4': 204, 'KENE1': 205, 'KENS1': 206, 'KSK1B': 207, 'KSK2': 208, 'MD1': 209, 'MD10': 210, 'MD100': 211, 'MD101': 212, 'MD102': 213, 'MD103': 214, 'MD104': 215, 'MD105': 216, 'MD106': 217, 'MD107': 218, 'MD108': 219, 'MD108B': 220, 'MD109': 221, 'MD11': 222, 'MD110': 223, 'MD111': 224, 'MD112': 225, 'MD113': 226, 'MD114': 227, 'MD115': 228, 'MD116': 229, 'MD117': 230, 'MD118': 231, 'MD119': 232, 'MD12': 233, 'MD120': 234, 'MD121': 235, 'MD122': 236, 'MD123': 237, 'MD124': 238, 'MD125': 239, 'MD126': 240, 'MD127': 241, 'MD128': 242, 'MD129': 243, 'MD13': 244, 'MD130': 245, 'MD131': 246, 'MD132': 247, 'MD133': 248, 'MD134': 249, 'MD135': 250, 'MD136': 251, 'MD137': 252, 'MD138': 253, 'MD139': 254, 'MD14': 255, 'MD140': 256, 'MD141': 257, 'MD142': 258, 'MD143': 259, 'MD144': 260, 'MD145': 261, 'MD146': 262, 'MD147': 263, 'MD148B': 264, 'MD149': 265, 'MD15': 266, 'MD150': 267, 'MD151': 268, 'MD152': 269, 'MD153': 270, 'MD154': 271, 'MD155': 272, 'MD156': 273, 'MD157': 274, 'MD158': 275, 'MD159': 276, 'MD16': 277, 'MD160': 278, 'MD161': 279, 'MD162': 280, 'MD163': 281, 'MD164': 282, 'MD166': 283, 'MD167': 284, 'MD168': 285, 'MD169': 286, 'MD17': 287, 'MD170': 288, 'MD171': 289, 'MD172': 290, 'MD173': 291, 'MD174': 292, 'MD175': 293, 'MD176': 294, 'MD177': 295, 'MD178': 296, 'MD179': 297, 'MD18': 298, 'MD180': 299, 'MD181': 300, 'MD182': 301, 'MD183': 302, 'MD184': 303, 'MD185': 304, 'MD186': 305, 'MD187': 306, 'MD188': 307, 'MD189': 308, 'MD19': 309, 'MD190': 310, 'MD191': 311, 'MD192': 312, 'MD193': 313, 'MD195': 314, 'MD196': 315, 'MD198': 316, 'MD199': 317, 'MD2': 318, 'MD20': 319, 'MD200': 320, 'MD201': 321, 'MD201B': 322, 'MD202': 323, 'MD203': 324, 'MD204': 325, 'MD205': 326, 'MD207': 327, 'MD208': 328, 'MD209': 329, 'MD209B': 330, 'MD210': 331, 'MD212': 332, 'MD213': 333, 'MD214': 334, 'MD215': 335, 'MD216': 336, 'MD217': 337, 'MD218': 338, 'MD219': 339, 'MD22': 340, 'MD221': 341, 'MD222': 342, 'MD223': 343, 'MD224': 344, 'MD225': 345, 'MD226': 346, 'MD227': 347, 'MD228': 348, 'MD229': 349, 'MD23': 350, 'MD230': 351, 'MD230B': 352, 'MD231': 353, 'MD232': 354, 'MD233': 355, 'MD234': 356, 'MD235': 357, 'MD237': 358, 'MD238': 359, 'MD239': 360, 'MD24': 361, 'MD240': 362, 'MD241': 363, 'MD242': 364, 'MD243': 365, 'MD244': 366, 'MD245': 367, 'MD249': 368, 'MD25': 369, 'MD251': 370, 'MD252': 371, 'MD253': 372, 'MD254': 373, 'MD255': 374, 'MD255B': 375, 'MD256': 376, 'MD257': 377, 'MD258': 378, 'MD259': 379, 'MD26': 380, 'MD260': 381, 'MD261': 382, 'MD262': 383, 'MD263': 384, 'MD264': 385, 'MD265': 386, 'MD265B': 387, 'MD266': 388, 'MD267': 389, 'MD268': 390, 'MD269': 391, 'MD270': 392, 'MD271': 393, 'MD272': 394, 'MD273': 395, 'MD274': 396, 'MD275': 397, 'MD276': 398, 'MD277': 399, 'MD278': 400, 'MD279': 401, 'MD280': 402, 'MD281': 403, 'MD283': 404, 'MD284': 405, 'MD285': 406, 'MD286': 407, 'MD287': 408, 'MD287B': 409, 'MD288': 410, 'MD289': 411, 'MD29': 412, 'MD291': 413, 'MD291B': 414, 'MD292': 415, 'MD293': 416, 'MD294': 417, 'MD295': 418, 'MD296': 419, 'MD297': 420, 'MD298': 421, 'MD299': 422, 'MD3': 423, 'MD30': 424, 'MD300': 425, 'MD301': 426, 'MD302': 427, 'MD303': 428, 'MD304': 429, 'MD305': 430, 'MD306': 431, 'MD307': 432, 'MD308': 433, 'MD309': 434, 'MD31': 435, 'MD310': 436, 'MD311': 437, 'MD312': 438, 'MD312B': 439, 'MD313': 440, 'MD314': 441, 'MD315': 442, 'MD316': 443, 'MD317': 444, 'MD318': 445, 'MD319': 446, 'MD32': 447, 'MD320': 448, 'MD321': 449, 'MD322': 450, 'MD324': 451, 'MD325': 452, 'MD326': 453, 'MD327': 454, 'MD328': 455, 'MD329': 456, 'MD33': 457, 'MD330': 458, 'MD332B': 459, 'MD333': 460, 'MD335': 461, 'MD336': 462, 'MD338': 463, 'MD34': 464, 'MD340': 465, 'MD341': 466, 'MD342': 467, 'MD343': 468, 'MD344': 469, 'MD345': 470, 'MD346': 471, 'MD347': 472, 'MD348': 473, 'MD349': 474, 'MD351': 475, 'MD352': 476, 'MD353': 477, 'MD354': 478, 'MD356': 479, 'MD357': 480, 'MD358': 481, 'MD36': 482, 'MD360': 483, 'MD361': 484, 'MD363': 485, 'MD364': 486, 'MD365': 487, 'MD366': 488, 'MD367': 489, 'MD368': 490, 'MD369': 491, 'MD37': 492, 'MD370': 493, 'MD371': 494, 'MD372': 495, 'MD374B': 496, 'MD375': 497, 'MD376': 498, 'MD377': 499, 'MD378': 500, 'MD379': 501, 'MD38': 502, 'MD380': 503, 'MD382': 504, 'MD383': 505, 'MD384': 506, 'MD385': 507, 'MD386': 508, 'MD387': 509, 'MD389': 510, 'MD39': 511, 'MD390': 512, 'MD391': 513, 'MD392': 514, 'MD393': 515, 'MD396': 516, 'MD397': 517, 'MD398': 518, 'MD399': 519, 'MD4': 520, 'MD40': 521, 'MD400': 522, 'MD401': 523, 'MD402': 524, 'MD403': 525, 'MD404': 526, 'MD405': 527, 'MD406': 528, 'MD407': 529, 'MD408': 530, 'MD409': 531, 'MD41': 532, 'MD410': 533, 'MD411': 534, 'MD412': 535, 'MD412B': 536, 'MD413': 537, 'MD414': 538, 'MD414B': 539, 'MD415': 540, 'MD416': 541, 'MD417': 542, 'MD418': 543, 'MD419': 544, 'MD42': 545, 'MD420': 546, 'MD421': 547, 'MD422': 548, 'MD423': 549, 'MD424': 550, 'MD425': 551, 'MD426': 552, 'MD427': 553, 'MD428': 554, 'MD429': 555, 'MD42B': 556, 'MD43': 557, 'MD430': 558, 'MD431': 559, 'MD433': 560, 'MD434': 561, 'MD435': 562, 'MD436': 563, 'MD437': 564, 'MD438': 565, 'MD439': 566, 'MD44': 567, 'MD440': 568, 'MD441': 569, 'MD443': 570, 'MD444': 571, 'MD445': 572, 'MD445B': 573, 'MD446': 574, 'MD448': 575, 'MD449': 576, 'MD45': 577, 'MD450': 578, 'MD451': 579, 'MD452': 580, 'MD454': 581, 'MD455': 582, 'MD456': 583, 'MD457': 584, 'MD458': 585, 'MD459': 586, 'MD46': 587, 'MD460': 588, 'MD461': 589, 'MD462': 590, 'MD463': 591, 'MD464': 592, 'MD465': 593, 'MD466': 594, 'MD467': 595, 'MD468': 596, 'MD469': 597, 'MD47': 598, 'MD470': 599, 'MD471': 600, 'MD472': 601, 'MD473': 602, 'MD474': 603, 'MD475': 604, 'MD476': 605, 'MD477': 606, 'MD478': 607, 'MD479': 608, 'MD48': 609, 'MD480': 610, 'MD481': 611, 'MD482': 612, 'MD483': 613, 'MD484': 614, 'MD486': 615, 'MD488': 616, 'MD489': 617, 'MD49': 618, 'MD490': 619, 'MD493': 620, 'MD494': 621, 'MD495': 622, 'MD496': 623, 'MD497': 624, 'MD498': 625, 'MD499': 626, 'MD5': 627, 'MD50': 628, 'MD502': 629, 'MD503': 630, 'MD505': 631, 'MD506': 632, 'MD507': 633, 'MD508': 634, 'MD51': 635, 'MD511': 636, 'MD512': 637, 'MD513': 638, 'MD514': 639, 'MD515': 640, 'MD516': 641, 'MD517': 642, 'MD518': 643, 'MD519': 644, 'MD52': 645, 'MD520': 646, 'MD521': 647, 'MD522': 648, 'MD524': 649, 'MD525': 650, 'MD526': 651, 'MD529': 652, 'MD53': 653, 'MD530': 654, 'MD531': 655, 'MD54': 656, 'MD56': 657, 'MD57': 658, 'MD571': 659, 'MD575': 660, 'MD58': 661, 'MD584': 662, 'MD59': 663, 'MD590': 664, 'MD597': 665, 'MD599': 666, 'MD6': 667, 'MD60': 668, 'MD600': 669, 'MD601': 670, 'MD607': 671, 'MD609': 672, 'MD610': 673, 'MD611': 674, 'MD612': 675, 'MD614': 676, 'MD617': 677, 'MD619': 678, 'MD62': 679, 'MD620': 680, 'MD621': 681, 'MD628': 682, 'MD629': 683, 'MD630': 684, 'MD632': 685, 'MD633': 686, 'MD634': 687, 'MD635': 688, 'MD636': 689, 'MD637': 690, 'MD638': 691, 'MD639': 692, 'MD64': 693, 'MD640': 694, 'MD641': 695, 'MD643': 696, 'MD644': 697, 'MD645': 698, 'MD646': 699, 'MD647': 700, 'MD648': 701, 'MD65': 702, 'MD650': 703, 'MD652': 704, 'MD653': 705, 'MD654': 706, 'MD655': 707, 'MD659': 708, 'MD66': 709, 'MD660': 710, 'MD662': 711, 'MD665': 712, 'MD666': 713, 'MD668': 714, 'MD675': 715, 'MD676': 716, 'MD678': 717, 'MD679': 718, 'MD68': 719, 'MD680': 720, 'MD682': 721, 'MD683': 722, 'MD685': 723, 'MD687': 724, 'MD688': 725, 'MD689': 726, 'MD69': 727, 'MD691': 728, 'MD692': 729, 'MD693': 730, 'MD694': 731, 'MD695': 732, 'MD697': 733, 'MD699': 734, 'MD6B': 735, 'MD7': 736, 'MD702': 737, 'MD705': 738, 'MD707': 739, 'MD709': 740, 'MD71': 741, 'MD710': 742, 'MD711': 743, 'MD712': 744, 'MD714': 745, 'MD715': 746, 'MD716': 747, 'MD718': 748, 'MD72': 749, 'MD720': 750, 'MD721': 751, 'MD722': 752, 'MD723': 753, 'MD726': 754, 'MD727': 755, 'MD728': 756, 'MD730': 757, 'MD732': 758, 'MD736': 759, 'MD738': 760, 'MD739': 761, 'MD74': 762, 'MD740': 763, 'MD741': 764, 'MD742': 765, 'MD743': 766, 'MD745': 767, 'MD746': 768, 'MD75': 769, 'MD750': 770, 'MD752': 771, 'MD754': 772, 'MD756': 773, 'MD760': 774, 'MD763': 775, 'MD765': 776, 'MD766': 777, 'MD77': 778, 'MD772': 779, 'MD773': 780, 'MD775': 781, 'MD777': 782, 'MD778': 783, 'MD78': 784, 'MD780': 785, 'MD781': 786, 'MD783': 787, 'MD788': 788, 'MD791': 789, 'MD792': 790, 'MD80': 791, 'MD81': 792, 'MD82': 793, 'MD84': 794, 'MD85': 795, 'MD86': 796, 'MD87': 797, 'MD88': 798, 'MD89': 799, 'MD8TER': 800, 'MD9': 801, 'MD90': 802, 'MD92': 803, 'MD93': 804, 'MD94': 805, 'MD95': 806, 'MD96': 807, 'MD97': 808, 'MD98': 809, 'MD99': 810, 'MDR10': 811, 'MDR14': 812, 'MDR15B': 813, 'MDR17B': 814, 'MDR18': 815, 'MDR21B': 816, 'MDR22': 817, 'MDR23': 818, 'MDR7': 819, 'MDR8': 820, 'MDR9': 821, 'MDRW1': 822, 'MDZ453': 823, 'MDZ453D1': 824, 'MDZ453R2': 825, 'MDZ491': 826, 'MDZ492': 827, 'MDZ501': 828, 'MDZ509': 829, 'MDZ510': 830, 'MDZ532': 831, 'MDZ533': 832, 'MDZ534': 833, 'MDZ535': 834, 'MDZ537': 835, 'MDZ538': 836, 'MDZ539': 837, 'MDZ540': 838, 'MDZ541': 839, 'MDZ542': 840, 'MDZ543': 841, 'MDZ544': 842, 'MDZ545': 843, 'MDZ546': 844, 'MDZ547': 845, 'MDZ548': 846, 'MDZ549': 847, 'MDZ550': 848, 'MDZ551': 849, 'MDZ552': 850, 'MDZ553': 851, 'MDZ554': 852, 'MDZ555': 853, 'MDZ556': 854, 'MDZ557': 855, 'MDZ558': 856, 'MDZ559': 857, 'MDZ560': 858, 'MDZ561': 859, 'MDZ562': 860, 'MDZ563': 861, 'MDZ564': 862, 'MDZ565': 863, 'MDZ566': 864, 'MDZ567': 865, 'MDZ568': 866, 'MDZ572': 867, 'MDZ573': 868, 'MDZ574': 869, 'MDZ576': 870, 'MDZ577': 871, 'MDZ579': 872, 'MDZ581': 873, 'MDZ583': 874, 'MDZ585': 875, 'MDZ586': 876, 'MDZ587': 877, 'MDZ588': 878, 'MDZ592': 879, 'MDZ595': 880, 'MDZ602': 881, 'MDZ603': 882, 'MDZ605': 883, 'MDZ606': 884, 'MDZ608': 885, 'MDZ615': 886, 'MDZ616': 887, 'MDZ618': 888, 'MDZ622': 889, 'MDZ623': 890, 'MDZ625': 891, 'MDZ626': 892, 'MDZ627': 893, 'MDZ631': 894, 'MDZ642': 895, 'MDZ649': 896, 'MDZ651': 897, 'MDZ656': 898, 'MDZ657': 899, 'MDZ661': 900, 'MDZ663': 901, 'MDZ664': 902, 'MDZ667': 903, 'MDZ669': 904, 'MDZ670': 905, 'MDZ671': 906, 'MDZ672': 907, 'MDZ674B': 908, 'MDZ677': 909, 'MDZ686': 910, 'MDZ690': 911, 'MDZ700': 912, 'MDZ701': 913, 'MDZ703': 914, 'MDZ704': 915, 'MDZ706': 916, 'MDZ708': 917, 'MDZ713': 918, 'MDZ717': 919, 'MDZ719': 920, 'MDZ724': 921, 'MDZ725': 922, 'MDZ729': 923, 'MDZ731': 924, 'MDZ733': 925, 'MDZ734': 926, 'MDZ735': 927, 'MDZ751': 928, 'MDZ753': 929, 'MDZ757': 930, 'MDZ758': 931, 'MDZ767': 932, 'MDZ768': 933, 'MDZ769': 934, 'MDZ770': 935, 'MDZ776': 936, 'MDZ782': 937, 'MDZ784': 938, 'MDZ785': 939, 'MDZ786': 940, 'MDZ793': 941, 'MDZ794': 942, 'MDZ795': 943, 'NBRW1': 944, 'NHBHJ1': 945, 'NHGAW1': 946, 'NRAA1': 947, 'NRAA2': 948, 'OEC1': 949, 'OEN1': 950, 'OKM1': 951, 'OL2': 952, 'OL6': 953, 'OM1': 954, 'OM6': 955, 'OM7': 956, 'OMF502': 957, 'OMF84': 958, 'OMG102': 959, 'OMG20': 960, 'OMG222': 961, 'OMG303': 962, 'OMG402': 963, 'OMG501': 964, 'OMG502': 965, 'OMG503': 966, 'OMG51': 967, 'OMG512': 968, 'OMG513': 969, 'OMG601': 970, 'OMG61': 971, 'OMG711': 972, 'OMG723': 973, 'OMG73': 974, 'OMG74': 975, 'OMG812': 976, 'OMG82': 977, 'OMG823': 978, 'OMG832': 979, 'OMGZ403': 980, 'OMGZ801': 981, 'OMGZ802': 982, 'OMGZ81': 983, 'OMGZ811': 984, 'OMGZ813': 985, 'OMGZ822': 986, 'OMH121': 987, 'OMH46': 988, 'OMH511': 989, 'OMH751': 990, 'OMH81': 991, 'OMI373': 992, 'OMI813': 993, 'OMI82': 994, 'OMIZ821': 995, 'OMJ111': 996, 'OMJ22': 997, 'OMJ223': 998, 'OMJ24': 999, 'OMJ301': 1000, 'OMJ313': 1001, 'OMJ323': 1002, 'OMJ33': 1003, 'OMJ333': 1004, 'OMJ401': 1005, 'OMJ41': 1006, 'OMJ422': 1007, 'OMJ431': 1008, 'OMJ433': 1009, 'OMJ443': 1010, 'OMJ512': 1011, 'OMJ552': 1012, 'OMJ60': 1013, 'OMJ61': 1014, 'OMJ62': 1015, 'OMJ64': 1016, 'OMJ642': 1017, 'OMJ66': 1018, 'OMJ661': 1019, 'OMJ67': 1020, 'OMJ701': 1021, 'OMJ702': 1022, 'OMJ702B': 1023, 'OMJ703': 1024, 'OMJ71': 1025, 'OMJ712': 1026, 'OMJ713': 1027, 'OMJ72': 1028, 'OMJ721': 1029, 'OMJ723': 1030, 'OMJ73': 1031, 'OMJ73B': 1032, 'OMJ74': 1033, 'OMJ743': 1034, 'OMJ763': 1035, 'OMJ77': 1036, 'OMJ771': 1037, 'OMJ802': 1038, 'OMJ802B': 1039, 'OMJ81': 1040, 'OMJ811': 1041, 'OMJ812': 1042, 'OMJ82': 1043, 'OMJ822': 1044, 'OMJ83': 1045, 'OMJ832': 1046, 'OMJZ121': 1047, 'OMJZ201': 1048, 'OMJZ203': 1049, 'OMJZ21': 1050, 'OMJZ302': 1051, 'OMJZ311': 1052, 'OMJZ32': 1053, 'OMJZ332': 1054, 'OMJZ441': 1055, 'OMJZ502': 1056, 'OMJZ52': 1057, 'OMJZ532': 1058, 'OMJZ622': 1059, 'OMJZ633': 1060, 'OMJZ65': 1061, 'OMJZ652': 1062, 'OMJZ742': 1063, 'OMJZ751': 1064, 'OMJZ761': 1065, 'OMJZ813': 1066, 'OMJZ842': 1067, 'OMJZ843': 1068, 'OMJZ85': 1069, 'OMJZ86': 1070, 'OMK102': 1071, 'OMK11': 1072, 'OMK112': 1073, 'OMK12': 1074, 'OMK122': 1075, 'OMK13': 1076, 'OMK131': 1077, 'OMK132': 1078, 'OMK14': 1079, 'OMK141': 1080, 'OMK142': 1081, 'OMK152': 1082, 'OMK16': 1083, 'OMK243': 1084, 'OMK25': 1085, 'OMK27': 1086, 'OMK31': 1087, 'OMK333': 1088, 'OMK35': 1089, 'OMK422': 1090, 'OMK463': 1091, 'OMK57': 1092, 'OMK572': 1093, 'OMK573': 1094, 'OMK60': 1095, 'OMK62': 1096, 'OMK623': 1097, 'OMK64': 1098, 'OMK71': 1099, 'OMK81': 1100, 'OMK841': 1101, 'OMK842': 1102, 'OMK843': 1103, 'OMKZ103': 1104, 'OMKZ121': 1105, 'OMKZ15': 1106, 'OMKZ153': 1107, 'OMKZ202': 1108, 'OMKZ212': 1109, 'OMKZ221': 1110, 'OMKZ232': 1111, 'OMKZ241': 1112, 'OMKZ251': 1113, 'OMKZ253': 1114, 'OMKZ262': 1115, 'OMKZ303': 1116, 'OMKZ311': 1117, 'OMKZ32': 1118, 'OMKZ332': 1119, 'OMKZ341': 1120, 'OMKZ353': 1121, 'OMKZ36': 1122, 'OMKZ372': 1123, 'OMKZ411': 1124, 'OMKZ413': 1125, 'OMKZ421': 1126, 'OMKZ433': 1127, 'OMKZ441': 1128, 'OMKZ442': 1129, 'OMKZ45': 1130, 'OMKZ46': 1131, 'OMKZ502': 1132, 'OMKZ522B': 1133, 'OMKZ552': 1134, 'OMKZ56': 1135, 'OMKZ601': 1136, 'OMKZ611': 1137, 'OMKZ612': 1138, 'OMKZ643': 1139, 'OMKZ672': 1140, 'OMKZ702': 1141, 'OMKZ712': 1142, 'OMKZ72': 1143, 'OMKZ751': 1144, 'OMKZ77': 1145, 'OMKZ773': 1146, 'OMKZ811': 1147, 'OMKZ821': 1148, 'OMKZ822': 1149, 'OMKZ823': 1150, 'OMKZ83': 1151, 'OMKZ831': 1152, 'OMKZ85': 1153, 'OMKZ873': 1154, 'OML103': 1155, 'OML11': 1156, 'OML113': 1157, 'OML121': 1158, 'OML12B': 1159, 'OML13': 1160, 'OML16': 1161, 'OML202': 1162, 'OML21': 1163, 'OML30': 1164, 'OML301': 1165, 'OML31': 1166, 'OML35': 1167, 'OML41': 1168, 'OML42': 1169, 'OML422': 1170, 'OML43': 1171, 'OML431': 1172, 'OML51': 1173, 'OML52': 1174, 'OML53': 1175, 'OML532': 1176, 'OML55': 1177, 'OML602': 1178, 'OML61': 1179, 'OML623': 1180, 'OML62B': 1181, 'OML63': 1182, 'OML633': 1183, 'OML65': 1184, 'OML712': 1185, 'OML72': 1186, 'OML721': 1187, 'OML72B': 1188, 'OML73': 1189, 'OML733': 1190, 'OML75B': 1191, 'OML76': 1192, 'OML813': 1193, 'OML82': 1194, 'OML822': 1195, 'OML832': 1196, 'OML83B': 1197, 'OML84': 1198, 'OML85': 1199, 'OML852': 1200, 'OML86': 1201, 'OML862': 1202, 'OMLZ133': 1203, 'OMLZ173': 1204, 'OMLZ233': 1205, 'OMLZ262': 1206, 'OMLZ272': 1207, 'OMLZ313': 1208, 'OMLZ321': 1209, 'OMLZ322': 1210, 'OMLZ33': 1211, 'OMLZ351': 1212, 'OMLZ36': 1213, 'OMLZ362': 1214, 'OMLZ402': 1215, 'OMLZ432': 1216, 'OMLZ442': 1217, 'OMLZ45': 1218, 'OMLZ452': 1219, 'OMLZ453': 1220, 'OMLZ512': 1221, 'OMLZ562': 1222, 'OMLZ572': 1223, 'OMLZ573': 1224, 'OMLZ632': 1225, 'OMLZ643': 1226, 'OMLZ651': 1227, 'OMLZ652': 1228, 'OMLZ662': 1229, 'OMLZ67': 1230, 'OMLZ752': 1231, 'OMLZ761': 1232, 'OMLZ763': 1233, 'OMLZ78': 1234, 'OMLZ87': 1235, 'OMLZ872': 1236, 'OMM202': 1237, 'OMM21': 1238, 'OMM30': 1239, 'OMM302': 1240, 'OMM302B': 1241, 'OMM31': 1242, 'OMM32': 1243, 'OMM33': 1244, 'OMM40': 1245, 'OMM402': 1246, 'OMM41': 1247, 'OMM412': 1248, 'OMM413': 1249, 'OMM422': 1250, 'OMM50': 1251, 'OMM502': 1252, 'OMM51': 1253, 'OMM512': 1254, 'OMM532': 1255, 'OMM54': 1256, 'OMM542': 1257, 'OMM62': 1258, 'OMM622': 1259, 'OMM643': 1260, 'OMM652': 1261, 'OMM66': 1262, 'OMM662': 1263, 'OMM67': 1264, 'OMM71': 1265, 'OMM731': 1266, 'OMM741': 1267, 'OMM75': 1268, 'OMM763': 1269, 'OMM772': 1270, 'OMM80': 1271, 'OMM803': 1272, 'OMM81': 1273, 'OMM812': 1274, 'OMM823': 1275, 'OMM842': 1276, 'OMM85': 1277, 'OMMZ212': 1278, 'OMMZ533': 1279, 'OMMZ653': 1280, 'OMMZ733': 1281, 'OMMZ751': 1282, 'OMMZ77': 1283, 'OMMZ773': 1284, 'OMMZ801': 1285, 'OMN10': 1286, 'OMN12': 1287, 'OMN14': 1288, 'OMN202': 1289, 'OMN203': 1290, 'OMN21': 1291, 'OMN212': 1292, 'OMN22': 1293, 'OMN24': 1294, 'OMN243': 1295, 'OMN25': 1296, 'OMN251': 1297, 'OMN261': 1298, 'OMN262': 1299, 'OMN302': 1300, 'OMN31': 1301, 'OMN312': 1302, 'OMN322': 1303, 'OMN33': 1304, 'OMN332': 1305, 'OMN341': 1306, 'OMN342': 1307, 'OMN35': 1308, 'OMN352': 1309, 'OMN40': 1310, 'OMN402': 1311, 'OMN41': 1312, 'OMN412': 1313, 'OMN413': 1314, 'OMN42': 1315, 'OMN422': 1316, 'OMN423': 1317, 'OMN43': 1318, 'OMN432': 1319, 'OMN442': 1320, 'OMN443': 1321, 'OMN451': 1322, 'OMN452': 1323, 'OMN471': 1324, 'OMN522': 1325, 'OMN53': 1326, 'OMN533': 1327, 'OMN541': 1328, 'OMN542': 1329, 'OMN543': 1330, 'OMN55': 1331, 'OMN563': 1332, 'OMN56B': 1333, 'OMN573': 1334, 'OMN601': 1335, 'OMN61': 1336, 'OMN62': 1337, 'OMN622': 1338, 'OMN63': 1339, 'OMN641': 1340, 'OMN653': 1341, 'OMN662': 1342, 'OMN67': 1343, 'OMN671': 1344, 'OMN68': 1345, 'OMN681B': 1346, 'OMN70': 1347, 'OMN702': 1348, 'OMN71': 1349, 'OMN72': 1350, 'OMN73': 1351, 'OMN733': 1352, 'OMN75': 1353, 'OMN76': 1354, 'OMN761': 1355, 'OMN762': 1356, 'OMN763': 1357, 'OMN77': 1358, 'OMN77B': 1359, 'OMN78': 1360, 'OMN781': 1361, 'OMN80': 1362, 'OMN802': 1363, 'OMN812': 1364, 'OMN82': 1365, 'OMN822': 1366, 'OMN82B': 1367, 'OMN84': 1368, 'OMN852': 1369, 'OMN853B': 1370, 'OMN862': 1371, 'OMN871': 1372, 'OMN872': 1373, 'OMN873': 1374, 'OMN88': 1375, 'OMNZ102': 1376, 'OMNZ132': 1377, 'OMNZ133': 1378, 'OMNZ142': 1379, 'OMNZ153': 1380, 'OMNZ232': 1381, 'OMNZ242': 1382, 'OMNZ252': 1383, 'OMNZ271': 1384, 'OMNZ273': 1385, 'OMNZ362': 1386, 'OMNZ47': 1387, 'OMNZ572': 1388, 'OMNZ65': 1389, 'OMNZ701': 1390, 'OMNZ703': 1391, 'OMNZ83': 1392, 'OMNZ833': 1393, 'OMNZ842': 1394, 'OMO10': 1395, 'OMO112': 1396, 'OMO13': 1397, 'OMO132': 1398, 'OMO133': 1399, 'OMO141': 1400, 'OMO142': 1401, 'OMO15': 1402, 'OMO151': 1403, 'OMO152': 1404, 'OMO16': 1405, 'OMO162': 1406, 'OMO163': 1407, 'OMO17': 1408, 'OMO172': 1409, 'OMO173': 1410, 'OMO212': 1411, 'OMO242': 1412, 'OMO24B': 1413, 'OMO25': 1414, 'OMO252': 1415, 'OMO26': 1416, 'OMO27': 1417, 'OMO272': 1418, 'OMO31': 1419, 'OMO323': 1420, 'OMO33': 1421, 'OMO341': 1422, 'OMO342': 1423, 'OMO343': 1424, 'OMO35': 1425, 'OMO351': 1426, 'OMO352': 1427, 'OMO353': 1428, 'OMO354': 1429, 'OMO36': 1430, 'OMO361': 1431, 'OMO362': 1432, 'OMO363': 1433, 'OMO364': 1434, 'OMO37': 1435, 'OMO38': 1436, 'OMO403': 1437, 'OMO42': 1438, 'OMO442': 1439, 'OMO45': 1440, 'OMO452': 1441, 'OMO46': 1442, 'OMO462': 1443, 'OMO47': 1444, 'OMO473': 1445, 'OMO48': 1446, 'OMO502': 1447, 'OMO51': 1448, 'OMO521': 1449, 'OMO53': 1450, 'OMO61': 1451, 'OMO62': 1452, 'OMO70': 1453, 'OMO701': 1454, 'OMO712': 1455, 'OMO72': 1456, 'OMO74': 1457, 'OMO741': 1458, 'OMO742': 1459, 'OMO75': 1460, 'OMO751': 1461, 'OMO752': 1462, 'OMO761': 1463, 'OMO763': 1464, 'OMO773': 1465, 'OMO78': 1466, 'OMO822': 1467, 'OMO82B': 1468, 'OMO83': 1469, 'OMO85': 1470, 'OMO852': 1471, 'OMO86': 1472, 'OMO862': 1473, 'OMO87': 1474, 'OMO87B': 1475, 'OMO88': 1476, 'OMOZ12': 1477, 'OMOZ131': 1478, 'OMOZ22': 1479, 'OMOZ222': 1480, 'OMOZ232': 1481, 'OMOZ273': 1482, 'OMOZ322': 1483, 'OMOZ333': 1484, 'OMOZ411': 1485, 'OMOZ422': 1486, 'OMOZ44': 1487, 'OMOZ441': 1488, 'OMOZ463': 1489, 'OMOZ472': 1490, 'OMOZ511': 1491, 'OMOZ522': 1492, 'OMOZ523': 1493, 'OMOZ543': 1494, 'OMOZ562': 1495, 'OMOZ631': 1496, 'OMOZ632': 1497, 'OMOZ64': 1498, 'OMOZ642': 1499, 'OMOZ662': 1500, 'OMOZ733': 1501, 'OMOZ801': 1502, 'OMOZ821': 1503, 'OMOZ833': 1504, 'OMOZ84B': 1505, 'OMP11': 1506, 'OMP141': 1507, 'OMP142': 1508, 'OMP142B': 1509, 'OMP143': 1510, 'OMP153': 1511, 'OMP16': 1512, 'OMP17': 1513, 'OMP172': 1514, 'OMP18': 1515, 'OMP20': 1516, 'OMP21': 1517, 'OMP21B': 1518, 'OMP22': 1519, 'OMP222': 1520, 'OMP233': 1521, 'OMP241': 1522, 'OMP262': 1523, 'OMP263': 1524, 'OMP272': 1525, 'OMP273': 1526, 'OMP273B': 1527, 'OMP30D': 1528, 'OMP31': 1529, 'OMP312': 1530, 'OMP32': 1531, 'OMP33': 1532, 'OMP371': 1533, 'OMP373': 1534, 'OMP41': 1535, 'OMP412': 1536, 'OMP42': 1537, 'OMP42B': 1538, 'OMP43': 1539, 'OMP46': 1540, 'OMP461': 1541, 'OMP47': 1542, 'OMP52': 1543, 'OMP522': 1544, 'OMP53': 1545, 'OMP56': 1546, 'OMP57': 1547, 'OMP572': 1548, 'OMP58': 1549, 'OMP58B': 1550, 'OMP61': 1551, 'OMP62': 1552, 'OMP632B': 1553, 'OMP64': 1554, 'OMP642': 1555, 'OMP65': 1556, 'OMP651': 1557, 'OMP652': 1558, 'OMP67': 1559, 'OMP672': 1560, 'OMP68': 1561, 'OMP70': 1562, 'OMP702': 1563, 'OMP71': 1564, 'OMP712': 1565, 'OMP72': 1566, 'OMP721': 1567, 'OMP722': 1568, 'OMP73': 1569, 'OMP74': 1570, 'OMP742': 1571, 'OMP75': 1572, 'OMP761': 1573, 'OMP762': 1574, 'OMP763': 1575, 'OMP772': 1576, 'OMP78': 1577, 'OMP80': 1578, 'OMP802': 1579, 'OMP811': 1580, 'OMP83': 1581, 'OMP832': 1582, 'OMP84': 1583, 'OMP843': 1584, 'OMP85': 1585, 'OMP862': 1586, 'OMPZ111': 1587, 'OMPZ113': 1588, 'OMPZ12': 1589, 'OMPZ123': 1590, 'OMPZ173': 1591, 'OMPZ253': 1592, 'OMPZ261': 1593, 'OMPZ331': 1594, 'OMPZ332': 1595, 'OMPZ34': 1596, 'OMPZ341': 1597, 'OMPZ36': 1598, 'OMPZ362': 1599, 'OMPZ442': 1600, 'OMPZ451': 1601, 'OMPZ462': 1602, 'OMPZ463': 1603, 'OMPZ473': 1604, 'OMPZ541': 1605, 'OMPZ552': 1606, 'OMPZ553': 1607, 'OMPZ812': 1608, 'OMPZ82': 1609, 'ONE232': 1610, 'ONI122': 1611, 'ONI13': 1612, 'ONI132': 1613, 'ONI171': 1614, 'ONI211': 1615, 'ONI23': 1616, 'ONI233': 1617, 'ONI31': 1618, 'ONI313': 1619, 'ONI321': 1620, 'ONI333': 1621, 'ONI34': 1622, 'ONI341': 1623, 'ONI343': 1624, 'ONI353': 1625, 'ONI403': 1626, 'ONI412': 1627, 'ONI441': 1628, 'ONI442': 1629, 'ONI45': 1630, 'ONI451': 1631, 'ONI452': 1632, 'ONI453': 1633, 'ONI501': 1634, 'ONI511': 1635, 'ONI523': 1636, 'ONI54': 1637, 'ONI551': 1638, 'ONI572': 1639, 'ONI642': 1640, 'ONIZ203': 1641, 'ONIZ252': 1642, 'ONIZ301': 1643, 'ONIZ303': 1644, 'ONIZ312': 1645, 'ONIZ323': 1646, 'ONIZ40': 1647, 'ONIZ402': 1648, 'ONIZ411': 1649, 'ONIZ413': 1650, 'ONIZ421': 1651, 'ONIZ422': 1652, 'ONIZ423': 1653, 'ONIZ432': 1654, 'ONIZ502': 1655, 'ONIZ541': 1656, 'ONIZ632': 1657, 'ONM11': 1658, 'ONM12': 1659, 'ONM13': 1660, 'ONM131': 1661, 'ONM13_': 1662, 'ONM141': 1663, 'ONM142': 1664, 'ONM15': 1665, 'ONM152': 1666, 'ONM21': 1667, 'ONM212': 1668, 'ONM22': 1669, 'ONM221': 1670, 'ONM222': 1671, 'ONM223': 1672, 'ONM23': 1673, 'ONM232': 1674, 'ONM233': 1675, 'ONM24': 1676, 'ONM241': 1677, 'ONM243': 1678, 'ONM25': 1679, 'ONM25B': 1680, 'ONM26': 1681, 'ONM32': 1682, 'ONM33': 1683, 'ONM331': 1684, 'ONM332': 1685, 'ONM34': 1686, 'ONM342': 1687, 'ONM35': 1688, 'ONM351': 1689, 'ONM352': 1690, 'ONM36': 1691, 'ONM362': 1692, 'ONM363': 1693, 'ONM372': 1694, 'ONM422': 1695, 'ONM442': 1696, 'ONM451': 1697, 'ONM452': 1698, 'ONM461': 1699, 'ONM463': 1700, 'ONM471': 1701, 'ONM541': 1702, 'ONM543': 1703, 'ONM61': 1704, 'ONM642': 1705, 'ONM65': 1706, 'ONM651': 1707, 'ONM75': 1708, 'ONMZ103': 1709, 'ONMZ133': 1710, 'ONMZ143': 1711, 'ONMZ153': 1712, 'ONMZ201': 1713, 'ONMZ263': 1714, 'ONMZ27': 1715, 'ONMZ303': 1716, 'ONMZ313': 1717, 'ONMZ333': 1718, 'ONMZ343': 1719, 'ONMZ37': 1720, 'ONMZ443': 1721, 'ONMZ473': 1722, 'ONMZ502': 1723, 'ONMZ503': 1724, 'ONMZ513': 1725, 'ONMZ561': 1726, 'ONMZ572': 1727, 'ONMZ712': 1728, 'RAA1': 1729, 'RAA2': 1730, 'RAA3': 1731, 'RAA5': 1732, 'RAMA1': 1733, 'RDBN1': 1734, 'RDBW1': 1735, 'RDC1': 1736, 'RDC11': 1737, 'RDC12': 1738, 'RDC14': 1739, 'RDC15': 1740, 'RDC16': 1741, 'RDC17': 1742, 'RDC18': 1743, 'RDC19': 1744, 'RDC1B': 1745, 'RDC20': 1746, 'RDC21': 1747, 'RDC22': 1748, 'RDC23': 1749, 'RDC24': 1750, 'RDC25': 1751, 'RDC26': 1752, 'RDC27': 1753, 'RDC4': 1754, 'RDC6': 1755, 'RDC8': 1756, 'RDC9': 1757, 'RDOM1': 1758, 'RECN1': 1759, 'RECS1': 1760, 'RECSWS1': 1761, 'RHB1': 1762, 'RHB2': 1763, 'RRBN1': 1764, 'RRBNW1': 1765, 'RRBS1': 1766, 'RRBSE1': 1767, 'RRBSW1': 1768, 'RTB1': 1769, 'SAIS1': 1770, 'SBBR1': 1771, 'SFEXT1': 1772, 'SFEXT3': 1773, 'SFPSW1': 1774, 'SFPW2': 1775, 'SHHT1': 1776, 'SRAMA1': 1777, 'TA1': 1778, 'TNKW304': 1779, 'WBEK1': 1780, 'WRDC1': 1781, 'WRDC2B': 1782, 'ZAM1': 1783, 'ZES1': 1784, 'ZES2': 1785, 'ZES3': 1786}
    return switcher.get(well_name, 'No match found')

# real values
def model_general(uploaded_file_daily, global_var, dj):
    well_name = st.text_input("Select well name :")

    if well_name:
        selected_well_id = inverse_switch_case(well_name)
        selected_well_id = int(selected_well_id)
        
        filtered_data = uploaded_file_daily[uploaded_file_daily['ID'] == selected_well_id]
        filtered_dj = dj[dj['ID'] == selected_well_id]
        
        if not filtered_data.empty:
            handle_nan2 = st.selectbox("Handling of missing values NAN", options=["None", "Delete data point that contain NAN", "Replace with the precedent value", "Replace NAN with avrg"])
            
            # Extraction des colonnes 'jour', 'month' et 'year' à partir de la colonne 'START_DATE'
            filtered_data = filtered_data.drop(filtered_data[filtered_data['START_DATE']=='1/27/2019'].index)
            filtered_data['START_DATE'] = pd.to_datetime(filtered_data['START_DATE'])
            filtered_data.sort_values(by='START_DATE', inplace=True)
            filtered_data['jour'] = filtered_data['START_DATE'].dt.day
            filtered_data['month'] = filtered_data['START_DATE'].dt.month
            filtered_data['year'] = filtered_data['START_DATE'].dt.year
            
            if handle_nan2 == "Delete data point that contain NAN":
                filtered_data = filtered_data.dropna()
                filtered_dj = filtered_dj.dropna()
                ploting(filtered_data, global_var, filtered_dj)
            elif handle_nan2 == "Replace with the precedent value":
                filtered_data = filtered_data.fillna(method='pad')
                filtered_dj = filtered_dj.fillna(method='pad')
                ploting(filtered_data, global_var, filtered_dj)
            elif handle_nan2 == "Replace NAN with avrg":
                filtered_data = filtered_data.fillna(filtered_data.mean())
                filtered_dj = filtered_dj.fillna(filtered_data.mean())
                ploting(filtered_data, global_var, filtered_dj)
        else:
            st.write("No data available for the selected well.")

def ploting(data,global_var,dj):
    global_var1 = np.array(global_var, dtype=object)

#*************** regime Critical & Uncritical together ***************
    if not np.all(global_var1[0] == 0) or not np.all(global_var1[1] == 0) or not np.all(global_var1[2] == 0) or not np.all(global_var1[9] == 0) or not np.all(global_var1[12] == 0):
        id = data['ID'].iloc[0]
        dates = data['START_DATE']
        # Extraire les caractéristiqueS
        X_nonT = data[['ID','jour', 'month', 'year', 'CHOKE', 'WHP', 'FLP']]
        # extract needed data from dj
        dj['START_DATE'] = pd.to_datetime(dj['START_DATE'])
        filtered_dj = dj[dj['ID'] == id]
        filtered_dj.sort_values(by='START_DATE', inplace=True)
        merged_df1 = pd.merge(data, filtered_dj, on="START_DATE", how="inner")
        # les plots **********************
        plt.rcParams['figure.figsize'] = [45, 15]
        # oil
        figO, axO = plt.subplots()
        axO.scatter(merged_df1['START_DATE'], merged_df1['quantiter oil'], color='red')
        axO.legend()
        axO.set_xlabel("Date")
        axO.set_ylabel("Oil production rate (m³/h)")
        st.title("Oil production rate measurement history for the well = " + str(switch_case(id)) + " -All regim of flow- :")
        st.pyplot(figO)  
        # gaz
        fig, ax = plt.subplots()
        ax.scatter(merged_df1['START_DATE'], merged_df1['quantiter gaz'], color='red')
        ax.legend()
        ax.set_xlabel("Date")
        ax.set_ylabel("Gas production rate(m³/h)")
        st.title("Gas production rate measurement history for the well  = " + str(switch_case(id)) + "  -All regim of flow- :")
        st.pyplot(fig)
        # water
        figW, axW = plt.subplots()
        axW.scatter(merged_df1['START_DATE'], merged_df1['water'], color='red')
        axW.legend()
        axW.set_xlabel("Date")
        axW.set_ylabel("Water production rate (l/h)")
        st.title("Water production rate measurement history for the well = " + str(switch_case(id)) + "  -All regim of flow- :")
        st.pyplot(figW)
    # 0- All regim of flow + 2phase :
        if global_var[0][0][0] != 0:
            if st.button("RFR - 2Phase - All regim of flow"):
                st.subheader("RFR :")
                # process Ranodm
                X = global_var[0][0][1].transform(X_nonT)
                y_pred = global_var[0][0][0].predict(X)
                y_pred = global_var[0][0][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0], 'Calculated gaz rate': y_pred[:,1]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRFR3Phase_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for oil rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated oil rate'],merged_df['quantiter oil']))
                st.write("Mean absolute errors for gaz rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated gaz rate'],merged_df['quantiter gaz']))
                # oil
                axO.plot(dates, y_pred[:,0])
                axO.legend()
                axO.set_xlabel("Date")
                axO.set_ylabel("Production rate (m³/h)")
                st.title("Oil production rate profile")
                st.pyplot(figO)  
                # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figO)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRoil.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)          
                # gaz
                ax.plot(dates, y_pred[:,1])
                ax.legend()
                ax.set_xlabel("Date")
                ax.set_ylabel("Production rate (m³/h)")
                st.title("Gas production rate profile")
                st.pyplot(fig)
                # save both oil & gaz plots
                global plot_axO
                global plot_figO
                global plot_ax
                global plot_fig
                plot_axO, plot_figO,plot_ax, plot_fig = axO, figO, ax, fig
                # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(fig)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRgas.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)  

        if global_var[0][1][0] != 0:
            if st.button("ANN - 2Phase - All regim of flow"):
                st.subheader("ANN:")
                # process ANN
                X = global_var[0][1][1].transform(X_nonT)
                y_pred = global_var[0][1][0].predict(X)
                y_pred = global_var[0][1][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0], 'Calculated gaz rate': y_pred[:,1]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results:')
                st.write(df_predict)
                # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsANN3Phase_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for oil rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated oil rate'],merged_df['quantiter oil']))
                st.write("Mean absolute errors for gaz rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated gaz rate'],merged_df['quantiter gaz']))
                # oil
                axO.plot(dates, y_pred[:,0])
                axO.legend()
                axO.set_xlabel("Date")
                axO.set_ylabel("Production rate (m³/h)")
                st.title("Oil production rate profile")
                st.pyplot(figO)
                 # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figO)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNoil.pdf" style="color: orange;">Download the PDF file</a>'
                    return href  
                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)  
         
                # gaz
                ax.plot(dates, y_pred[:,1])
                ax.legend()
                ax.set_xlabel("Date")
                ax.set_ylabel("Production rate (m³/h)")
                st.title("Gas production rate profile")
                st.pyplot(fig)
                global plot_axOA
                global plot_figOA
                global plot_axA
                global plot_figA
                plot_axOA, plot_figOA,plot_axA, plot_figA = axO, figO, ax, fig
                 # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(fig)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNgas.pdf" style="color: orange;">Download the PDF file</a>'
                    return href
                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)  

        if global_var[0][2][0] != 0:
            if st.button("RNN - 2Phase - All regim of flow"):
                st.subheader("RNN:")
                X = global_var[0][2][1].transform(X_nonT)
                X_predict = np.reshape(X, (X.shape[0], 1, X.shape[1]))
                y_pred = global_var[0][2][0].predict(X_predict)
                y_pred = global_var[0][2][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0], 'Calculated gaz rate': y_pred[:,1]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRNN3Phase_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for oil rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated oil rate'],merged_df['quantiter oil']))
                st.write("Mean absolute errors for gaz rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated gaz rate'],merged_df['quantiter gaz']))
                # oil
                axO.plot(dates, y_pred[:,0])
                axO.legend()
                axO.set_xlabel("Date")
                axO.set_ylabel("Production rate (m³/h)")
                st.title("Oil production rate profile")
                st.pyplot(figO)
                # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figO)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNoil.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            
                # gaz
                ax.plot(dates, y_pred[:,1])
                ax.legend()
                ax.set_xlabel("Date")
                ax.set_ylabel("Production rate (m³/h)")
                st.title("Gas production rate profile")
                st.pyplot(fig)
                global plot_axOR
                global plot_figOR
                global plot_axR
                global plot_figR
                plot_axOR, plot_figOR,plot_axR, plot_figR = axO, figO, ax, fig
                # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(fig)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNgas.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

    # 12- All regim of flow + 3phase :
        if global_var[12][0][0] != 0:
            if st.button("RFR - 3Phase - All regim of flow"):
                st.subheader("RFR :")
                # process Ranodm
                X = global_var[12][0][1].transform(X_nonT)
                y_pred = global_var[12][0][0].predict(X)
                y_pred = global_var[12][0][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0], 'Calculated gaz rate': y_pred[:,1], 'Calculated water rate': y_pred[:,2]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRFR3Phase_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for oil rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated oil rate'],merged_df['quantiter oil']))
                st.write("Mean absolute errors for gaz rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated gaz rate'],merged_df['quantiter gaz']))
                st.write("Mean absolute errors for water rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated water rate'],merged_df['water']))
                # oil
                axO.plot(dates, y_pred[:,0])
                axO.legend()
                axO.set_xlabel("Date")
                axO.set_ylabel("Production rate (m³/h)")
                st.title("Oil production rate profile")
                st.pyplot(figO)  
                # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figO)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRoil.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)          
                # gaz
                ax.plot(dates, y_pred[:,1])
                ax.legend()
                ax.set_xlabel("Date")
                ax.set_ylabel("Production rate (m³/h)")
                st.title("Gas production rate profile")
                st.pyplot(fig)
                # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(fig)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRgas.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)
                # water
                axW.plot(dates, y_pred[:,2])
                axW.legend()
                axW.set_xlabel("Date")
                axW.set_ylabel("Production rate (l/h)")
                st.title("Water production rate profile")
                st.pyplot(figW)
                # save all plots
                global plot_axO3
                global plot_figO3
                global plot_ax3
                global plot_fig3
                global plot_axWCA3_only
                global plot_figWCA3_only
                plot_axO3, plot_figO3,plot_ax3, plot_fig3, plot_axWCA3_only, plot_figWCA3_only = axO, figO, ax, fig, axW, figW
                 # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figW)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNallRegimesWater.pdf" style="color: orange;">Download the PDF file</a>'
                    return href
                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)                   

        # if global_var[12][1][0] != 0:
        #     if st.button("ANN - 3Phase - All regim of flow"):
        #         st.subheader("ANN:")
        #         # process ANN
        #         X = global_var[12][1][1].transform(X_nonT)
        #         y_pred = global_var[12][1][0].predict(X)
        #         y_pred = global_var[12][1][2].inverse_transform(y_pred)
        #         #affichage
        #         df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0], 'Calculated gaz rate': y_pred[:,1], 'Calculated water rate': y_pred[:,2]})
        #         # Merge the DataFrames on the START_DATE column
        #         merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
        #         st.write('Model calculation results:')
        #         st.write(df_predict)
        #         # Téléchargement du fichier CSV
        #         def download_csv():
        #             csv = df_predict.to_csv(index=False)
        #             b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
        #             href = f'<a href="data:file/csv;base64,{b64}" download="ResultsANN3Phase_data.csv" style="color: orange;">Click here to download the file CSV</a>'
        #             return href

        #         st.markdown(download_csv(), unsafe_allow_html=True)
        #         # EVALUATION
        #         # Calculate the mean absolute errors
        #         st.write("Mean absolute errors for oil rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated oil rate'],merged_df['quantiter oil']))
        #         st.write("Mean absolute errors for gaz rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated gaz rate'],merged_df['quantiter gaz']))
        #         st.write("Mean absolute errors for water rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated water rate'],merged_df['water']))
        #         # oil
        #         axO.plot(dates, y_pred[:,0])
        #         axO.legend()
        #         axO.set_xlabel("Date")
        #         axO.set_ylabel("Production rate (m³/h)")
        #         st.title("Oil production rate profile")
        #         st.pyplot(figO)
        #          # Enregistrement du plot dans un fichier PDF
        #         def save_plot_to_pdf():
        #             with pdf_backend.PdfPages("plot.pdf") as pdf:
        #                 pdf.savefig(figO)
        #             with open("plot.pdf", "rb") as file:
        #                 b64 = base64.b64encode(file.read()).decode()
        #             href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNoil.pdf" style="color: orange;">Download the PDF file</a>'
        #             return href  
        #         st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)  

        #         # gaz
        #         ax.plot(dates, y_pred[:,1])
        #         ax.legend()
        #         ax.set_xlabel("Date")
        #         ax.set_ylabel("Production rate (m³/h)")
        #         st.title("Gas production rate profile")
        #         st.pyplot(fig)
        #         global plot_axOA3
        #         global plot_figOA3
        #         global plot_axA3
        #         global plot_figA3
        #         plot_axOA3, plot_figOA3, plot_axA3, plot_figA3 = axO, figO, ax, fig
        #          # Enregistrement du plot dans un fichier PDF
        #         def save_plot_to_pdf():
        #             with pdf_backend.PdfPages("plot.pdf") as pdf:
        #                 pdf.savefig(fig)
        #             with open("plot.pdf", "rb") as file:
        #                 b64 = base64.b64encode(file.read()).decode()
        #             href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNgas.pdf" style="color: orange;">Download the PDF file</a>'
        #             return href
        #         st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

        #         # water
        #         axW.plot(dates, y_pred[:,2])
        #         axW.legend()
        #         axW.set_xlabel("Date")
        #         axW.set_ylabel("Production rate (l/h)")
        #         st.title("Water production rate profile")
        #         st.pyplot(figW)
        #         global plot_axWCA_only
        #         global plot_figWCA_only
        #         plot_axWCA_only, plot_figWCA_only= axW, figW
        #          # Enregistrement du plot dans un fichier PDF
        #         def save_plot_to_pdf():
        #             with pdf_backend.PdfPages("plot.pdf") as pdf:
        #                 pdf.savefig(figW)
        #             with open("plot.pdf", "rb") as file:
        #                 b64 = base64.b64encode(file.read()).decode()
        #             href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNallRegimesWater.pdf" style="color: orange;">Download the PDF file</a>'
        #             return href
        #         st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)   

        # if global_var[12][2][0] != 0:
        #     if st.button("RNN - 2Phase - All regim of flow"):
        #         st.subheader("RNN:")
        #         X = global_var[0][2][1].transform(X_nonT)
        #         X_predict = np.reshape(X, (X.shape[0], 1, X.shape[1]))
        #         y_pred = global_var[0][2][0].predict(X_predict)
        #         y_pred = global_var[0][2][2].inverse_transform(y_pred)
        #         #affichage
        #         df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0], 'Calculated gaz rate': y_pred[:,1]})
        #         # Merge the DataFrames on the START_DATE column
        #         merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
        #         st.write('Model calculation results :')
        #         st.write(df_predict)
        #         # Téléchargement du fichier CSV
        #         def download_csv():
        #             csv = df_predict.to_csv(index=False)
        #             b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
        #             href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRNN3Phase_data.csv" style="color: orange;">Click here to download the file CSV</a>'
        #             return href

        #         st.markdown(download_csv(), unsafe_allow_html=True)
        #         # EVALUATION
        #         # Calculate the mean absolute errors
        #         st.write("Mean absolute errors for oil rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated oil rate'],merged_df['quantiter oil']))
        #         st.write("Mean absolute errors for gaz rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated gaz rate'],merged_df['quantiter gaz']))
        #         # oil
        #         axO.plot(dates, y_pred[:,0])
        #         axO.legend()
        #         axO.set_xlabel("Date")
        #         axO.set_ylabel("Production rate (m³/h)")
        #         st.title("Oil production rate profile")
        #         st.pyplot(figO)
        #         # Enregistrement du plot dans un fichier PDF
        #         def save_plot_to_pdf():
        #             with pdf_backend.PdfPages("plot.pdf") as pdf:
        #                 pdf.savefig(figO)
        #             with open("plot.pdf", "rb") as file:
        #                 b64 = base64.b64encode(file.read()).decode()
        #             href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNoil.pdf" style="color: orange;">Download the PDF file</a>'
        #             return href

        #         st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            
        #         # gaz
        #         ax.plot(dates, y_pred[:,1])
        #         ax.legend()
        #         ax.set_xlabel("Date")
        #         ax.set_ylabel("Production rate (m³/h)")
        #         st.title("Gas production rate profile")
        #         st.pyplot(fig)
        #         global plot_axOR
        #         global plot_figOR
        #         global plot_axR
        #         global plot_figR
        #         plot_axOR, plot_figOR,plot_axR, plot_figR = axO, figO, ax, fig
        #         # Enregistrement du plot dans un fichier PDF
        #         def save_plot_to_pdf():
        #             with pdf_backend.PdfPages("plot.pdf") as pdf:
        #                 pdf.savefig(fig)
        #             with open("plot.pdf", "rb") as file:
        #                 b64 = base64.b64encode(file.read()).decode()
        #             href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNgas.pdf" style="color: orange;">Download the PDF file</a>'
        #             return href

        #         st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

    # 1- All regim of flow + oil :
        if global_var[1][0][0] != 0:
            if st.button("RFR - oil - All regim of flow"):
                st.subheader("RFR - oil - All regim of flow :")
                # process Ranodm
                X = global_var[1][0][1].transform(X_nonT)
                y_pred = global_var[1][0][0].predict(X)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[1][0][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results:')
                st.write(df_predict)
                # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRFRoil_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for oil rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated oil rate'],merged_df['quantiter oil']))
                # oil
                axO.plot(dates, y_pred[:,0])
                axO.legend()
                axO.set_xlabel("Date")
                axO.set_ylabel("Production rate (m³/h)")
                st.title("Oil production rate profile")
                st.pyplot(figO)
                global plot_axOR_random
                global plot_figOR_random
                plot_axOR_random, plot_figOR_random = axO, figO
                # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figO)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRoil.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            

        if global_var[1][1][0] != 0:
            if st.button("ANN - Oil - All regim of flow"):
                st.subheader("ANN - Oil - All regim of flow:")
                # process ANN
                X = global_var[1][1][1].transform(X_nonT)
                y_pred = global_var[1][1][0].predict(X)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[1][1][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsANNoil_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for oil rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated oil rate'],merged_df['quantiter oil']))
                # oil
                axO.plot(dates, y_pred[:,0])
                axO.legend()
                axO.set_xlabel("Date")
                axO.set_ylabel("Production rate (m³/h)")
                st.title("Oil production rate profile")
                st.pyplot(figO)
                global plot_axOR_A
                global plot_figOR_A
                plot_axOR_A, plot_figOR_A = axO, figO
                # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figO)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNoil.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            

        if global_var[1][2][0] != 0:
            if st.button("RNN - Oil - All regim of flow"):
                st.subheader("RNN - Oil - All regim of flow:")
                X = global_var[1][2][1].transform(X_nonT)
                X_predict = np.reshape(X, (X.shape[0], 1, X.shape[1]))
                y_pred = global_var[1][2][0].predict(X_predict)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[1][2][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                 # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRNNoil_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for oil rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated oil rate'],merged_df['quantiter oil']))
                # oil
                axO.plot(dates, y_pred[:,0])
                axO.legend()
                axO.set_xlabel("Date")
                axO.set_ylabel("Production rate (m³/h)")
                st.title("Oil production rate profile")
                st.pyplot(figO)
                global plot_axOR_R
                global plot_figOR_R
                plot_axOR_R, plot_figOR_R = axO, figO
                # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figO)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNoil.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            

    # 2- All regim of flow + gaz :
        if global_var[2][0][0] != 0:
            if st.button("RFR - gaz - All regim of flow"):
                st.subheader("RFR  - gaz - All regim of flow :")
                # process Ranodm
                X = global_var[2][0][1].transform(X_nonT)
                y_pred = global_var[2][0][0].predict(X)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[2][0][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates,'Calculated gaz rate': y_pred[:,0]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                 # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRFRgas_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for gaz rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated gaz rate'],merged_df['quantiter gaz']))          
                # gaz
                ax.plot(dates, y_pred[:,0])
                ax.legend()
                ax.set_xlabel("Date")
                ax.set_ylabel("Production rate (m³/h)")
                st.title("Gas production rate profile")
                st.pyplot(fig)
                global plot_axGR
                global plot_figGR
                plot_axGR, plot_figGR = ax, fig
                # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(fig)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRgas.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

        if global_var[2][1][0] != 0:
            if st.button("ANN - gaz - All regim of flow"):
                st.subheader("ANN - gaz - All regim of flow:")
                # process ANN
                X = global_var[2][1][1].transform(X_nonT)
                y_pred = global_var[2][1][0].predict(X)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[2][1][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates,'Calculated gaz rate': y_pred[:,0]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                 # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsANNgas_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for gaz rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated gaz rate'],merged_df['quantiter gaz']))          
                # gaz
                ax.plot(dates, y_pred[:,0])
                ax.legend()
                ax.set_xlabel("Date")
                ax.set_ylabel("Production rate (m³/h)")
                st.title("Gas production rate profile")
                st.pyplot(fig)
                global plot_axGA
                global plot_figGA
                plot_axGA, plot_figGA = ax, fig
                    # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(fig)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNgas.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

        if global_var[2][2][0] != 0:
            if st.button("RNN - gaz - All regim of flow"):
                st.subheader("RNN - gaz - All regim of flow:")
                X = global_var[2][2][1].transform(X_nonT)
                X_predict = np.reshape(X, (X.shape[0], 1, X.shape[1]))
                y_pred = global_var[2][2][0].predict(X_predict)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[2][2][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates,'Calculated gaz rate': y_pred[:,0]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                 # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRNNgas_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for gaz rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated gaz rate'],merged_df['quantiter gaz']))        
                # gaz
                ax.plot(dates, y_pred[:,0])
                ax.legend()
                ax.set_xlabel("Date")
                ax.set_ylabel("Production rate (m³/h)")
                st.title("Gas production rate profile")
                st.pyplot(fig)
                global plot_axGRNN
                global plot_figGRNN
                plot_axGRNN, plot_figGRNN = ax, fig
                     # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(fig)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNgas.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

    # 9- All regim of flow + water :
        if global_var[9][0][0] != 0:
            if st.button("RFR - Water - All regim of flow"):
                st.subheader("RFR  - Water - All regim of flow :")
                # process Ranodm
                X = global_var[9][0][1].transform(X_nonT)
                y_pred = global_var[9][0][0].predict(X)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[9][0][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates,'Calculated water rate': y_pred[:,0]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                 # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRFRwater_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for water rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated water rate'],merged_df['water']))          
                # gaz
                axW.plot(dates, y_pred[:,0])
                axW.legend()
                axW.set_xlabel("Date")
                axW.set_ylabel("Production rate (l/h)")
                st.title("Water production rate profile")
                st.pyplot(figW)
                global plot_axW
                global plot_figW
                plot_axW, plot_figW = axW, figW
                     # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figW)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRwater.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

        if global_var[9][1][0] != 0:
            if st.button("ANN - Water - All regim of flow"):
                st.subheader("ANN - Water - All regim of flow:")
                # process ANN
                X = global_var[9][1][1].transform(X_nonT)
                y_pred = global_var[9][1][0].predict(X)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[9][1][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates,'Calculated water rate': y_pred[:,0]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                 # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsANNwater_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for water rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated water rate'],merged_df['water']))          
                # gaz
                axW.plot(dates, y_pred[:,0])
                axW.legend()
                axW.set_xlabel("Date")
                axW.set_ylabel("Production rate (l/h)")
                st.title("Water production rate profile")
                st.pyplot(figW)
                global plot_axWA
                global plot_figWA
                plot_axWA, plot_figWA = axW, figW
                           # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figW)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNwater.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

        if global_var[9][2][0] != 0:
            if st.button("RNN - Water - All regim of flow"):
                st.subheader("RNN - Water - All regim of flow:")
                X = global_var[9][2][1].transform(X_nonT)
                X_predict = np.reshape(X, (X.shape[0], 1, X.shape[1]))
                y_pred = global_var[9][2][0].predict(X_predict)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[9][2][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates,'Calculated water rate': y_pred[:,0]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRNNwater_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for water rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated water rate'],merged_df['water']))          
                # gaz
                axW.plot(dates, y_pred[:,0])
                axW.legend()
                axW.set_xlabel("Date")
                axW.set_ylabel("Production rate (l/h)")
                st.title("Water production rate profile")
                st.pyplot(figW)
                global plot_axWR
                global plot_figWR
                plot_axWR, plot_figWR = axW, figW
                           # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figW)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNwater.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

#*************** regime Critical only ***************
    if not np.all(global_var1[3] == 0) or not np.all(global_var1[4] == 0) or not np.all(global_var1[5] == 0) or not np.all(global_var1[10] == 0):
        # Convertir la colonne 'START_DATE' en datetime avec le format d'origine
        dataC = data
        id = dataC['ID'].iloc[0]
        dataC = dataC.drop(dataC[dataC['FLP'] / dataC['WHP'] > 0.75].index)
        dates = dataC['START_DATE']
        # Extraire les caractéristiqueS
        X_nonT = dataC[['ID','jour', 'month', 'year', 'CHOKE', 'WHP', 'FLP']]
        # extract needed data from dj
        dj['START_DATE'] = pd.to_datetime(dj['START_DATE'])
        djC = dj
        filtered_dj = djC[djC['ID'] == id]
        filtered_dj = filtered_dj.drop(filtered_dj[filtered_dj['FLP'] / filtered_dj['WHP'] > 0.75].index)
        filtered_dj.sort_values(by='START_DATE', inplace=True)
        merged_df1 = pd.merge(data, filtered_dj, on="START_DATE", how="inner")
        # les plots **********************
        plt.rcParams['figure.figsize'] = [45, 15]
        # oil
        figO, axO = plt.subplots()
        axO.scatter(merged_df1['START_DATE'], merged_df1['quantiter oil'], color='red')
        axO.legend()
        axO.set_xlabel("Date")
        axO.set_ylabel("Oil production rate (m³/h)")
        st.title("Oil production rate measurement history for the well = " + str(switch_case(id)) + " -critical regim- :")
        st.pyplot(figO)  
        # gaz
        fig, ax = plt.subplots()
        ax.scatter(merged_df1['START_DATE'], merged_df1['quantiter gaz'], color='red')
        ax.legend()
        ax.set_xlabel("Date")
        ax.set_ylabel("Gas production rate(m³/h)")
        st.title("Gas production rate measurement history for the well = " + str(switch_case(id)) + " -critical regim- :")
        st.pyplot(fig)
        # water
        figW, axW = plt.subplots()
        axW.scatter(merged_df1['START_DATE'], merged_df1['water'], color='red')
        axW.legend()
        axW.set_xlabel("Date")
        axW.set_ylabel("Water production rate (l/h)")
        st.title("Water production rate measurement history for the well = " + str(switch_case(id)) + " -critical regim- :")
        st.pyplot(figW)
    # 3- Critical + 2phase :
        if global_var[3][0][0] != 0:
            if st.button("RFR - 2Phase - Critical"):
                st.subheader("RFR - 2Phase - Critical:")
                # process Ranodm
                X = global_var[3][0][1].transform(X_nonT)
                y_pred = global_var[3][0][0].predict(X)
                y_pred = global_var[3][0][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0], 'Calculated gaz rate': y_pred[:,1]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                  # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRFRCritical3Phase_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for oil rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated oil rate'],merged_df['quantiter oil']))
                st.write("Mean absolute errors for gaz rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated gaz rate'],merged_df['quantiter gaz']))
                # oil
                axO.plot(dates, y_pred[:,0])
                axO.legend()
                axO.set_xlabel("Date")
                axO.set_ylabel("Production rate (m³/h)")
                st.title("Oil production rate profile")
                st.pyplot(figO)
                # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figO)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRCritical3oil.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            
                # gaz
                ax.plot(dates, y_pred[:,1])
                ax.legend()
                ax.set_xlabel("Date")
                ax.set_ylabel("Production rate (m³/h)")
                st.title("Gas production rate profile")
                st.pyplot(fig)
                global plot_axOC
                global plot_figOC
                global plot_axC
                global plot_figC
                plot_axOC, plot_figOC, plot_axC, plot_figC= axO, figO,ax, fig
                # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(fig)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRCritical3gas.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

        if global_var[3][1][0] != 0:
            if st.button("ANN - 2Phase - Critical"):
                st.subheader("ANN - 2Phase - Critical:")
                # process ANN
                X = global_var[3][1][1].transform(X_nonT)
                y_pred = global_var[3][1][0].predict(X)
                y_pred = global_var[3][1][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0], 'Calculated gaz rate': y_pred[:,1]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                 # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsANNCritical3Phase_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for oil rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated oil rate'],merged_df['quantiter oil']))
                st.write("Mean absolute errors for gaz rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated gaz rate'],merged_df['quantiter gaz']))
                # oil
                axO.plot(dates, y_pred[:,0])
                axO.legend()
                axO.set_xlabel("Date")
                axO.set_ylabel("Production rate (m³/h)")
                st.title("Oil production rate profile")
                st.pyplot(figO)
                 # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figO)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNCritical3oil.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            
                # gaz
                ax.plot(dates, y_pred[:,1])
                ax.legend()
                ax.set_xlabel("Date")
                ax.set_ylabel("Production rate (m³/h)")
                st.title("Gas production rate profile")
                st.pyplot(fig)
                global plot_axOCA
                global plot_figOCA
                global plot_axCA
                global plot_figCA
                plot_axOCA, plot_figOCA, plot_axCA, plot_figCA= axO, figO, ax, fig
                 # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(fig)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNCritical3gas.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

        if global_var[3][2][0] != 0:
            if st.button("RNN - 2Phase - Critical"):
                st.subheader("RNN - 2Phase - Critical:")
                X = global_var[3][2][1].transform(X_nonT)
                X_predict = np.reshape(X, (X.shape[0], 1, X.shape[1]))
                y_pred = global_var[3][2][0].predict(X_predict)
                y_pred = global_var[3][2][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0], 'Calculated gaz rate': y_pred[:,1]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                  # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRNNCritical3Phase_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for oil rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated oil rate'],merged_df['quantiter oil']))
                st.write("Mean absolute errors for gaz rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated gaz rate'],merged_df['quantiter gaz']))
                # oil
                axO.plot(dates, y_pred[:,0])
                axO.legend()
                axO.set_xlabel("Date")
                axO.set_ylabel("Production rate (m³/h)")
                st.title("Oil production rate profile")
                st.pyplot(figO)
                 # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figO)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNCritical3oil.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            
                # gaz
                ax.plot(dates, y_pred[:,1])
                ax.legend()
                ax.set_xlabel("Date")
                ax.set_ylabel("Production rate (m³/h)")
                st.title("Gas production rate profile")
                st.pyplot(fig)
                global plot_axOCR
                global plot_figOCR
                global plot_axCR
                global plot_figCR
                plot_axOCR, plot_figOCR, plot_axCR, plot_figCR= axO, figO,ax, fig
                 # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(fig)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNCritical3gas.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

    # 4- Critical + oil :
        if global_var[4][0][0] != 0:
            if st.button("RFR - oil - Critical"):
                st.subheader("RFR - oil - Critical :")
                # process Ranodm
                X = global_var[4][0][1].transform(X_nonT)
                y_pred = global_var[4][0][0].predict(X)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[4][0][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                  # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRFRCriticaloil_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION 
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for oil rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated oil rate'],merged_df['quantiter oil']))
                # oil
                axO.plot(dates, y_pred[:,0])
                axO.legend()
                axO.set_xlabel("Date")
                axO.set_ylabel("Production rate (m³/h)")
                st.title("Oil production rate profile")
                st.pyplot(figO)
                global plot_axOC_only
                global plot_figOC_only
                plot_axOC_only, plot_figOC_only= axO, figO
                 # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figO)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRCriticaloil.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            

        if global_var[4][1][0] != 0:
            if st.button("ANN - Oil - Critical"):
                st.subheader("ANN - Oil - Critical:")
                # process ANN
                X = global_var[4][1][1].transform(X_nonT)
                y_pred = global_var[4][1][0].predict(X)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[4][1][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                    # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsANNCriticaloil_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION 
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for oil rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated oil rate'],merged_df['quantiter oil']))
                # oil
                axO.plot(dates, y_pred[:,0])
                axO.legend()
                axO.set_xlabel("Date")
                axO.set_ylabel("Production rate (m³/h)")
                st.title("Oil production rate profile")
                st.pyplot(figO)
                global plot_axOCA_only
                global plot_figOCA_only
                plot_axOCA_only, plot_figOCA_only= axO, figO 
                  # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figO)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PloANNCriticaloilt.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            

        if global_var[4][2][0] != 0:
            if st.button("RNN - Oil - Critical"):
                st.subheader("RNN - Oil - Critical:")
                X = global_var[4][2][1].transform(X_nonT)
                X_predict = np.reshape(X, (X.shape[0], 1, X.shape[1]))
                y_pred = global_var[4][2][0].predict(X_predict)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[4][2][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results:')
                st.write(df_predict)
                 # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRNNCriticaloil_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION 
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for oil rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated oil rate'],merged_df['quantiter oil']))
                # oil
                axO.plot(dates, y_pred[:,0])
                axO.legend()
                axO.set_xlabel("Date")
                axO.set_ylabel("Production rate (m³/h)")
                st.title("Oil production rate profile")
                st.pyplot(figO)
                global plot_axOCR_only
                global plot_figOCR_only
                plot_axOCR_only, plot_figOCR_only= axO, figO
                 # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figO)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNCriticaloil.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            

    # 5- Critical + gaz :
        if global_var[5][0][0] != 0:
            if st.button("RFR - gaz - Critical"):
                st.subheader("RFR  - gaz - Critical :")
                # process Ranodm
                X = global_var[5][0][1].transform(X_nonT)
                y_pred = global_var[5][0][0].predict(X)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[5][0][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates,'Calculated gaz rate': y_pred[:,0]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                 # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRFRCriticalgas_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION 
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for gaz rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated gaz rate'],merged_df['quantiter gaz']))          
                # gaz
                ax.plot(dates, y_pred[:,0])
                ax.legend()
                ax.set_xlabel("Date")
                ax.set_ylabel("Production rate (m³/h)")
                st.title("Gas production rate profile")
                st.pyplot(fig)
                global plot_axC_only
                global plot_figC_only
                plot_axC_only, plot_figC_only= ax, fig
                 # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(fig)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRCriticalgas.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

        if global_var[5][1][0] != 0:
            if st.button("ANN - gaz - Critical"):
                st.subheader("ANN - gaz - Critical:")
                # process ANN
                X = global_var[5][1][1].transform(X_nonT)
                y_pred = global_var[5][1][0].predict(X)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[5][1][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates,'Calculated gaz rate': y_pred[:,0]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                 # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsANNCriticalgas_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION 
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for gaz rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated gaz rate'],merged_df['quantiter gaz']))           
                # gaz
                ax.plot(dates, y_pred[:,0])
                ax.legend()
                ax.set_xlabel("Date")
                ax.set_ylabel("Production rate (m³/h)")
                st.title("Gas production rate profile")
                st.pyplot(fig)
                global plot_axCA_only
                global plot_figCA_only
                plot_axCA_only, plot_figCA_only= ax, fig
                 # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(fig)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNCriticalgas.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

        if global_var[5][2][0] != 0:
            if st.button("RNN - gaz - Critical"):
                st.subheader("RNN - gaz - Critical:")
                X = global_var[5][2][1].transform(X_nonT)
                X_predict = np.reshape(X, (X.shape[0], 1, X.shape[1]))
                y_pred = global_var[5][2][0].predict(X_predict)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[5][2][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates,'Calculated gaz rate': y_pred[:,0]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                 # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRNNCriticalgas_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION 
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for gaz rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated gaz rate'],merged_df['quantiter gaz']))         
                # gaz
                ax.plot(dates, y_pred[:,0])
                ax.legend()
                ax.set_xlabel("Date")
                ax.set_ylabel("Production rate (m³/h)")
                st.title("Gas production rate profile")
                st.pyplot(fig)
                global plot_axRC_only
                global plot_figRC_only
                plot_axRC_only, plot_figRC_only= ax, fig
                 # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(fig)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNCriticalgas.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

    # 10- Critical + water :
        if global_var[10][0][0] != 0:
            if st.button("RFR - Water - Critical"):
                st.subheader("RFR  - Water - Critical :")
                # process Ranodm
                X = global_var[10][0][1].transform(X_nonT)
                y_pred = global_var[10][0][0].predict(X)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[10][0][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates,'Calculated water rate': y_pred[:,0]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                 # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRFRCriticalwater_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION 
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for water rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated water rate'],merged_df['water']))          
                # gaz
                axW.plot(dates, y_pred[:,0])
                axW.legend()
                axW.set_xlabel("Date")
                axW.set_ylabel("Production rate (l/h)")
                st.title("Water production rate profile")
                st.pyplot(figW)
                global plot_axWC_only
                global plot_figWC_only
                plot_axWC_only, plot_figWC_only= axW, figW
                   # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figW)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRCriticalwater.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

        if global_var[10][1][0] != 0:
            if st.button("ANN - Water - Critical"):
                st.subheader("ANN - Water - Critical:")
                # process ANN
                X = global_var[10][1][1].transform(X_nonT)
                y_pred = global_var[10][1][0].predict(X)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[10][1][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates,'Calculated water rate': y_pred[:,0]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsANNCriticalwater_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION 
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for water rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated water rate'],merged_df['water']))          
                # water
                axW.plot(dates, y_pred[:,0])
                axW.legend()
                axW.set_xlabel("Date")
                axW.set_ylabel("Production rate (l/h)")
                st.title("Water production rate profile")
                st.pyplot(figW)
                global plot_axWCA_only
                global plot_figWCA_only
                plot_axWCA_only, plot_figWCA_only= axW, figW
                 # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figW)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNCriticalwater.pdf" style="color: orange;">Download the PDF file</a>'
                    return href
                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

        if global_var[10][2][0] != 0:
            if st.button("RNN - Water - Critical"):
                st.subheader("RNN - Water - Critical:")
                X = global_var[10][2][1].transform(X_nonT)
                X_predict = np.reshape(X, (X.shape[0], 1, X.shape[1]))
                y_pred = global_var[10][2][0].predict(X_predict)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[10][2][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates,'Calculated water rate': y_pred[:,0]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                 # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRNNCriticalwater_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION 
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for water rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated water rate'],merged_df['water']))          
                # water
                axW.plot(dates, y_pred[:,0])
                axW.legend()
                axW.set_xlabel("Date")
                axW.set_ylabel("Production rate (l/h)")
                st.title("Water production rate profile")
                st.pyplot(figW)
                global plot_axWCR_only
                global plot_figWCR_only
                plot_axWCR_only, plot_figWCR_only= axW, figW
                  # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figW)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNCriticalwater.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

#*************** regime Uncritical onty ***************
    if not np.all(global_var1[6] == 0) or not np.all(global_var1[7] == 0) or not np.all(global_var1[8] == 0) or not np.all(global_var1[11] == 0):
        dataNC = data
        id = dataNC['ID'].iloc[0]
        dataNC = dataNC.drop(dataNC[dataNC['FLP'] / dataNC['WHP'] < 0.75].index)
        dates = dataNC['START_DATE']
        # Extraire les caractéristiqueS
        X_nonT = dataNC[['ID','jour', 'month', 'year', 'CHOKE', 'WHP', 'FLP']]
        # extract needed data from dj
        djNC = dj
        djNC['START_DATE'] = pd.to_datetime(djNC['START_DATE'])
        filtered_dj = djNC[djNC['ID'] == id]
        filtered_dj = filtered_dj.drop(filtered_dj[filtered_dj['FLP'] / filtered_dj['WHP'] < 0.75].index)
        filtered_dj.sort_values(by='START_DATE', inplace=True)
        merged_df1 = pd.merge(dataNC, filtered_dj, on="START_DATE", how="inner")
        # les plots **********************
        plt.rcParams['figure.figsize'] = [45, 15]
        # oil
        figO, axO = plt.subplots()
        axO.scatter(merged_df1['START_DATE'], merged_df1['quantiter oil'], color='red')
        axO.legend()
        axO.set_xlabel("Date")
        axO.set_ylabel("Oil production rate (m³/h)")
        st.title("Oil production rate measurement history for the well = " + str(switch_case(id)) + "  Uncritical :")
        st.pyplot(figO)  
        # gaz
        fig, ax = plt.subplots()
        ax.scatter(merged_df1['START_DATE'], merged_df1['quantiter gaz'], color='red')
        ax.legend()
        ax.set_xlabel("Date")
        ax.set_ylabel("Gas production rate(m³/h)")
        st.title("Gas production rate measurement history for the well = " + str(switch_case(id)) + " Uncritical :")
        st.pyplot(fig)
        # water
        figW, axW = plt.subplots()
        axW.scatter(merged_df1['START_DATE'], merged_df1['water'], color='red')
        axW.legend()
        axW.set_xlabel("Date")
        axW.set_ylabel("Water production rate (l/h)")
        st.title("Water production rate measurement history for the well = " + str(switch_case(id)) + " Uncritical :")
        st.pyplot(figW)
    # 3- Uncritical + 2phase :
        if global_var[6][0][0] != 0:
            if st.button("RFR - 2Phase - Uncritical"):
                st.subheader("RFR - 2Phase - Uncritical:")
                # process Ranodm
                X = global_var[6][0][1].transform(X_nonT)
                y_pred = global_var[6][0][0].predict(X)
                y_pred = global_var[6][0][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0], 'Calculated gaz rate': y_pred[:,1]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                 # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRFRnonCritical3Phase_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION 
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for oil rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated oil rate'],merged_df['quantiter oil']))
                st.write("Mean absolute errors for gaz rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated gaz rate'],merged_df['quantiter gaz']))
                # oil
                axO.plot(dates, y_pred[:,0])
                axO.legend()
                axO.set_xlabel("Date")
                axO.set_ylabel("Production rate (m³/h)")
                st.title("Oil production rate profile")
                st.pyplot(figO)
                 # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figO)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRnonCritical3oil.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            
                # gaz
                ax.plot(dates, y_pred[:,1])
                ax.legend()
                ax.set_xlabel("Date")
                ax.set_ylabel("Production rate (m³/h)")
                st.title("Gas production rate profile")
                st.pyplot(fig)
                global plot_axONC
                global plot_figONC
                global plot_axNC
                global plot_figNC
                plot_axONC, plot_figONC, plot_axNC, plot_figNC= axO, figO,ax, fig
                 # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(fig)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRnonCritical3gas.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

        if global_var[6][1][0] != 0:
            if st.button("ANN - 2Phase - Uncritical"):
                st.subheader("ANN - 2Phase - Uncritical:")
                # process ANN
                X = global_var[6][1][1].transform(X_nonT)
                y_pred = global_var[6][1][0].predict(X)
                y_pred = global_var[6][1][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0], 'Calculated gaz rate': y_pred[:,1]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                 # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsANNnonCritical3Phase_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION 
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for oil rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated oil rate'],merged_df['quantiter oil']))
                st.write("Mean absolute errors for gaz rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated gaz rate'],merged_df['quantiter gaz']))
                # oil
                axO.plot(dates, y_pred[:,0])
                axO.legend()
                axO.set_xlabel("Date")
                axO.set_ylabel("Production rate (m³/h)")
                st.title("Oil production rate profile")
                st.pyplot(figO)
                 # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figO)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNnonCritical3oil.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            
                # gaz
                ax.plot(dates, y_pred[:,1])
                ax.legend()
                ax.set_xlabel("Date")
                ax.set_ylabel("Production rate (m³/h)")
                st.title("Gas production rate profile")
                st.pyplot(fig)
                global plot_axONCA
                global plot_figONCA
                global plot_axNCA
                global plot_figNCA
                plot_axONCA, plot_figONCA, plot_axNCA, plot_figNCA= axO, figO,ax, fig
                 # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(fig)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNnonCritical3gas.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

        if global_var[6][2][0] != 0:
            if st.button("RNN - 2Phase - Uncritical"):
                st.subheader("RNN - 2Phase - Uncritical:")
                X = global_var[6][2][1].transform(X_nonT)
                X_predict = np.reshape(X, (X.shape[0], 1, X.shape[1]))
                y_pred = global_var[6][2][0].predict(X_predict)
                y_pred = global_var[6][2][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0], 'Calculated gaz rate': y_pred[:,1]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                 # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRNNnonCritical3Phase_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION 
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for oil rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated oil rate'],merged_df['quantiter oil']))
                st.write("Mean absolute errors for gaz rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated gaz rate'],merged_df['quantiter gaz']))
                # oil
                axO.plot(dates, y_pred[:,0])
                axO.legend()
                axO.set_xlabel("Date")
                axO.set_ylabel("Production rate (m³/h)")
                st.title("Oil production rate profile")
                st.pyplot(figO)
                 # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figO)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNnonCritical3oil.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            
                # gaz
                ax.plot(dates, y_pred[:,1])
                ax.legend()
                ax.set_xlabel("Date")
                ax.set_ylabel("Production rate (m³/h)")
                st.title("Gas production rate profile")
                st.pyplot(fig)
                global plot_axONCR
                global plot_figONCR
                global plot_axNCR
                global plot_figNCR
                plot_axONCR, plot_figONCR, plot_axNCR, plot_figNCR= axO, figO,ax, fig
                 # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(fig)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNnonCritical3gas.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

    # 4- Uncritical + oil :
        if global_var[7][0][0] != 0:
            if st.button("RFR - oil - Uncritical"):
                st.subheader("RFR - oil - Uncritical :")
                # process Ranodm
                X = global_var[7][0][1].transform(X_nonT)
                y_pred = global_var[7][0][0].predict(X)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[7][0][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                 # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRFRnonCriticaloil_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION 
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for oil rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated oil rate'],merged_df['quantiter oil']))
                # oil
                axO.plot(dates, y_pred[:,0])
                axO.legend()
                axO.set_xlabel("Date")
                axO.set_ylabel("Production rate (m³/h)")
                st.title("Oil production rate profile")
                st.pyplot(figO) 
                global plot_axONC_only
                global plot_figONC_only
                plot_axONC_only, plot_figONC_only= axO, figO
                     # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figO)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRnonCriticaloil.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)           

        if global_var[7][1][0] != 0:
            if st.button("ANN - Oil - Uncritical"):
                st.subheader("ANN - Oil - Uncritical:")
                # process ANN
                X = global_var[7][1][1].transform(X_nonT)
                y_pred = global_var[7][1][0].predict(X)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[7][1][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                 # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsANNnonCriticaloil_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION 
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for oil rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated oil rate'],merged_df['quantiter oil']))
                # oil
                axO.plot(dates, y_pred[:,0])
                axO.legend()
                axO.set_xlabel("Date")
                axO.set_ylabel("Production rate (m³/h)")
                st.title("Oil production rate profile")
                st.pyplot(figO) 
                global plot_axONCA_only
                global plot_figONCA_only
                plot_axONCA_only, plot_figONCA_only= axO, figO
                  # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figO)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNnonCriticaloil.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            

        if global_var[7][2][0] != 0:
            if st.button("RNN - Oil - Uncritical"):
                st.subheader("RNN - Oil - Uncritical:")
                X = global_var[7][2][1].transform(X_nonT)
                X_predict = np.reshape(X, (X.shape[0], 1, X.shape[1]))
                y_pred = global_var[7][2][0].predict(X_predict)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[7][2][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRNNnonCriticaloil_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION 
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for oil rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated oil rate'],merged_df['quantiter oil']))
                # oil
                axO.plot(dates, y_pred[:,0])
                axO.legend()
                axO.set_xlabel("Date")
                axO.set_ylabel("Production rate (m³/h)")
                st.title("Oil production rate profile")
                st.pyplot(figO)
                global plot_axONCR_only
                global plot_figONCR_only
                plot_axONCR_only, plot_figONCR_only= axO, figO
                  # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figO)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNnonCriticaloil.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            

    # 5- Uncritical + gaz :
        if global_var[8][0][0] != 0:
            if st.button("RFR - gaz - Uncritical"):
                st.subheader("RFR  - gaz - Uncritical :")
                # process Ranodm
                X = global_var[8][0][1].transform(X_nonT)
                y_pred = global_var[8][0][0].predict(X)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[8][0][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates,'Calculated gaz rate': y_pred[:,0]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRFRnonCriticalgas_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION 
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for gaz rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated gaz rate'],merged_df['quantiter gaz']))          
                # gaz
                ax.plot(dates, y_pred[:,0])
                ax.legend()
                ax.set_xlabel("Date")
                ax.set_ylabel("Production rate (m³/h)")
                st.title("Gas production rate profile")
                st.pyplot(fig)
                global plot_axNC_only
                global plot_figNC_only
                plot_axNC_only, plot_figNC_only= ax, fig
                 # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(fig)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRnonCriticalgas.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True) 

        if global_var[8][1][0] != 0:
            if st.button("ANN - gaz - Uncritical"):
                st.subheader("ANN - gaz - Uncritical:")
                # process ANN
                X = global_var[8][1][1].transform(X_nonT)
                y_pred = global_var[8][1][0].predict(X)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[8][1][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates,'Calculated gaz rate': y_pred[:,0]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsANNnonCriticalgas_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION 
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for gaz rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated gaz rate'],merged_df['quantiter gaz']))           
                # gaz
                ax.plot(dates, y_pred[:,0])
                ax.legend()
                ax.set_xlabel("Date")
                ax.set_ylabel("Production rate (m³/h)")
                st.title("Gas production rate profile")
                st.pyplot(fig)
                global plot_axNCA_only
                global plot_figNCA_only
                plot_axNCA_only, plot_figNCA_only= ax, fig
                 # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(fig)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNnonCriticalgas.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True) 

        if global_var[8][2][0] != 0:
            if st.button("RNN - gaz - Uncritical"):
                st.subheader("RNN - gaz - Uncritical:")
                X = global_var[8][2][1].transform(X_nonT)
                X_predict = np.reshape(X, (X.shape[0], 1, X.shape[1]))
                y_pred = global_var[8][2][0].predict(X_predict)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[8][2][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates,'Calculated gaz rate': y_pred[:,0]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRNNnonCriticalgas_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION 
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for gaz rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated gaz rate'],merged_df['quantiter gaz']))         
                # gaz
                ax.plot(dates, y_pred[:,0])
                ax.legend()
                ax.set_xlabel("Date")
                ax.set_ylabel("Production rate (m³/h)")
                st.title("Gas production rate profile")
                st.pyplot(fig)
                global plot_axNCR_only
                global plot_figNCR_only
                plot_axNCR_only, plot_figNCR_only= ax, fig
                 # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(fig)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNnonCriticalgas.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True) 

    # 11- Uncritical + water :
        if global_var[11][0][0] != 0:
            if st.button("RFR - Water - Uncritical"):
                st.subheader("RFR  - Water - Uncritical :")
                # process Ranodm
                X = global_var[11][0][1].transform(X_nonT)
                y_pred = global_var[11][0][0].predict(X)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[11][0][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates,'Calculated water rate': y_pred[:,0]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                 # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRFRnonCriticalwater_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION 
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for water rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated water rate'],merged_df['water']))          
                # water
                axW.plot(dates, y_pred[:,0])
                axW.legend()
                axW.set_xlabel("Date")
                axW.set_ylabel("Production rate (l/h)")
                st.title("Water production rate profile")
                st.pyplot(figW)
                global plot_axWNC_only
                global plot_figWNC_only
                plot_axWNC_only, plot_figWNC_only= axW, figW
                  # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figW)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRnonCriticalwater.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True) 

        if global_var[11][1][0] != 0:
            if st.button("ANN - Water - Uncritical"):
                st.subheader("ANN - Water - Uncritical:")
                # process ANN
                X = global_var[11][1][1].transform(X_nonT)
                y_pred = global_var[11][1][0].predict(X)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[11][1][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates,'Calculated water rate': y_pred[:,0]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsANNnonCriticalwater_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION 
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for water rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated water rate'],merged_df['water']))          
                # water
                axW.plot(dates, y_pred[:,0])
                axW.legend()
                axW.set_xlabel("Date")
                axW.set_ylabel("Production rate (l/h)")
                st.title("Water production rate profile")
                st.pyplot(figW)
                global plot_axWNCA_only
                global plot_figWNCA_only
                plot_axWNCA_only, plot_figWNCA_only= axW, figW
                  # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figW)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNnonCriticalwater.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True) 

        if global_var[11][2][0] != 0:
            if st.button("RNN - Water - Uncritical"):
                st.subheader("RNN - Water - Uncritical:")
                X = global_var[11][2][1].transform(X_nonT)
                X_predict = np.reshape(X, (X.shape[0], 1, X.shape[1]))
                y_pred = global_var[11][2][0].predict(X_predict)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[11][2][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates,'Calculated water rate': y_pred[:,0]})
                # Merge the DataFrames on the START_DATE column
                merged_df = pd.merge(df_predict, filtered_dj, on="START_DATE", how="inner")
                st.write('Model calculation results :')
                st.write(df_predict)
                # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRNNnonCriticalwater_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # EVALUATION 
                # Calculate the mean absolute errors
                st.write("Mean absolute errors for water rate 'Calculated VS Measured':", mean_absolute_error(merged_df['Calculated water rate'],merged_df['water']))          
                # water
                axW.plot(dates, y_pred[:,0])
                axW.legend()
                axW.set_xlabel("Date")
                axW.set_ylabel("Production rate (l/h)")
                st.title("Water production rate profile")
                st.pyplot(figW)
                global plot_axWNCR_only
                global plot_figWNCR_only
                plot_axWNCR_only, plot_figWNCR_only= axW, figW
                    # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(figW)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNnonCriticalwater.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True) 

# predicted values
def sendInputs(flp,whp,data,nbr,global_var,dj):
    whp = np.array(whp[-nbr])
    flp = np.array(flp[-nbr])
    dates = []
    date2 = pd.to_datetime(data['START_DATE'].iloc[-1])
    for i in range(nbr):
        date2 = date2 + pd.Timedelta(days=1)
        dates.append(date2)
    predictd_data = pd.DataFrame({'START_DATE': dates, 'CHOKE': data['CHOKE'].iloc[-1], 'WHP': whp, 'FLP': flp})
    predictd_data['jour'] = predictd_data['START_DATE'].dt.day
    predictd_data['month'] = predictd_data['START_DATE'].dt.month
    predictd_data['year'] = predictd_data['START_DATE'].dt.year
    predictd_data['ID'] = data['ID']
    Xpredicted = predictd_data[['ID','START_DATE','jour', 'month', 'year', 'CHOKE', 'WHP', 'FLP']]
    plotingP(Xpredicted,global_var,dj)

def plotingP(data,global_var,dj):
    global_var1 = np.array(global_var, dtype=object)
#*************** regime Critical & Uncritical together ***************
    if not np.all(global_var1[0] == 0) or not np.all(global_var1[1] == 0) or not np.all(global_var1[2] == 0) or not np.all(global_var1[9] == 0) or not np.all(global_var1[12] == 0):
        id = data['ID'].iloc[0]
        dates = data['START_DATE']
        # Extraire les caractéristiqueS
        X_nonT = data[['ID','jour', 'month', 'year', 'CHOKE', 'WHP', 'FLP']]
        # extract needed data from dj
        dj['START_DATE'] = pd.to_datetime(dj['START_DATE'])
        filtered_dj = dj[dj['ID'] == id]
        filtered_dj.sort_values(by='START_DATE', inplace=True)
    # 0- All regim of flow + 2phase :
        if global_var[0][0][0] != 0:
            # if st.button("RFR - 2Phase - All regim of flow"):
                st.subheader("RFR - 2Phase - All regim of flow:")
                # process Ranodm
                X = global_var[0][0][1].transform(X_nonT)
                y_pred = global_var[0][0][0].predict(X)
                y_pred = global_var[0][0][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0], 'Calculated gaz rate': y_pred[:,1]})
                st.write('Model calculation results :')
                st.write(df_predict)
                # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRFR3Phase_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # oil
                plot_axO.plot(dates, y_pred[:,0],color='green')
                plot_axO.legend()
                plot_axO.set_xlabel("Date")
                plot_axO.set_ylabel("Production rate (m³/h) ")
                st.title("Oil production rate profile")
                st.pyplot(plot_figO)  
                # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(plot_figO)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRoil.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)          
                # gaz
                plot_ax.plot(dates, y_pred[:,1],color='green')
                plot_ax.legend()
                plot_ax.set_xlabel("Date")
                plot_ax.set_ylabel("Production rate (m³/h)")
                st.title("Gas production rate profile")
                st.pyplot(plot_fig)
                # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(plot_fig)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRgas.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)   

        if global_var[0][1][0] != 0:
            # if st.button("ANN - 2Phase - All regim of flow"):
                st.subheader("ANN - 2Phase - All regim of flow:")
                # process ANN
                X = global_var[0][1][1].transform(X_nonT)
                y_pred = global_var[0][1][0].predict(X)
                y_pred = global_var[0][1][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0], 'Calculated gaz rate': y_pred[:,1]})
                st.write('Model calculation results :')
                st.write(df_predict)
                # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsANN3Phase_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # oil
                plot_axOA.plot(dates, y_pred[:,0], color='green')
                plot_axOA.legend()
                plot_axOA.set_xlabel("Date")
                plot_axOA.set_ylabel("Production rate (m³/h)")
                st.title("Oil production rate profile")
                st.pyplot(plot_figOA) 
                 # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(plot_figOA)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNoil.pdf" style="color: orange;">Download the PDF file</a>'
                    return href  
                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)   
         
                # gaz
                plot_axA.plot(dates, y_pred[:,1], color='green')
                plot_axA.legend()
                plot_axA.set_xlabel("Date")
                plot_axA.set_ylabel("Production rate (m³/h)")
                st.title("Gas production rate profile")
                st.pyplot(plot_figA)
                 # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(plot_figA)
                 # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(plot_figA)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNgas.pdf" style="color: orange;">Download the PDF file</a>'
                    return href
                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)   

        if global_var[0][2][0] != 0:
            # if st.button("RNN - 2Phase - All regim of flow"):
                st.subheader("RNN - 2Phase - All regim of flow:")
                X = global_var[0][2][1].transform(X_nonT)
                X_predict = np.reshape(X, (X.shape[0], 1, X.shape[1]))
                y_pred = global_var[0][2][0].predict(X_predict)
                y_pred = global_var[0][2][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0], 'Calculated gaz rate': y_pred[:,1]})
                st.write('Model calculation results :')
                st.write(df_predict)
                # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRNN3Phase_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # oil
                plot_axOR.plot(dates, y_pred[:,0], color='green')
                plot_axOR.legend()
                plot_axOR.set_xlabel("Date")
                plot_axOR.set_ylabel("Production rate (m³/h)")
                st.title("Oil production rate profile")
                st.pyplot(plot_figOR)
                # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(plot_figOR)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNoil.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)             
                # gaz
                plot_axR.plot(dates, y_pred[:,1], color='green')
                plot_axR.legend()
                plot_axR.set_xlabel("Date")
                plot_axR.set_ylabel("Production rate (m³/h)")
                st.title("Gas production rate profile")
                st.pyplot(plot_figR)
                # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(plot_figR)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNgas.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True) 

    # 12- All regim of flow + 3phase :
        if global_var[12][0][0] != 0:
            # if st.button("RFR - 3Phase - All regim of flow"):
                st.subheader("RFR - 3Phase - All regim of flow:")
                # process Ranodm
                X = global_var[12][0][1].transform(X_nonT)
                y_pred = global_var[12][0][0].predict(X)
                y_pred = global_var[12][0][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0], 'Calculated gaz rate': y_pred[:,1], 'Calculated water rate': y_pred[:,2]})
                st.write('Model calculation results :')
                st.write(df_predict)
                # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRFR3Phase_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href
                st.markdown(download_csv(), unsafe_allow_html=True)
                
                # oil
                plot_axO3.plot(dates, y_pred[:,0],color='green')
                plot_axO3.legend()
                plot_axO3.set_xlabel("Date")
                plot_axO3.set_ylabel("Production rate (m³/h) ")
                st.title("Oil production rate profile")
                st.pyplot(plot_figO3)  
                # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(plot_figO3)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRoil.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)          
                # gaz
                plot_ax3.plot(dates, y_pred[:,1],color='green')
                plot_ax3.legend()
                plot_ax3.set_xlabel("Date")
                plot_ax3.set_ylabel("Production rate (m³/h)")
                st.title("Gas production rate profile")
                st.pyplot(plot_fig3)
                # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(plot_fig3)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRgas.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)   
                # water
                plot_axWCA3_only.plot(dates, y_pred[:,2],color='green')
                plot_axWCA3_only.legend()
                plot_axWCA3_only.set_xlabel("Date")
                plot_axWCA3_only.set_ylabel("Production rate (l/h)")
                st.title("Water production rate profile")
                st.pyplot(plot_figWCA3_only)
                     # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(plot_figWCA3_only)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRwater.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

        # if global_var[12][1][0] != 0:
        #     # if st.button("ANN - 2Phase - All regim of flow"):
        #         st.subheader("ANN - 2Phase - All regim of flow:")
        #         # process ANN
        #         X = global_var[0][1][1].transform(X_nonT)
        #         y_pred = global_var[0][1][0].predict(X)
        #         y_pred = global_var[0][1][2].inverse_transform(y_pred)
        #         #affichage
        #         df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0], 'Calculated gaz rate': y_pred[:,1]})
        #         st.write('Model calculation results :')
        #         st.write(df_predict)
        #         # Téléchargement du fichier CSV
        #         def download_csv():
        #             csv = df_predict.to_csv(index=False)
        #             b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
        #             href = f'<a href="data:file/csv;base64,{b64}" download="ResultsANN3Phase_data.csv" style="color: orange;">Click here to download the file CSV</a>'
        #             return href

        #         st.markdown(download_csv(), unsafe_allow_html=True)
        #         # oil
        #         plot_axOA.plot(dates, y_pred[:,0], color='green')
        #         plot_axOA.legend()
        #         plot_axOA.set_xlabel("Date")
        #         plot_axOA.set_ylabel("Production rate (m³/h)")
        #         st.title("Oil production rate profile")
        #         st.pyplot(plot_figOA) 
        #          # Enregistrement du plot dans un fichier PDF
        #         def save_plot_to_pdf():
        #             with pdf_backend.PdfPages("plot.pdf") as pdf:
        #                 pdf.savefig(plot_figOA)
        #             with open("plot.pdf", "rb") as file:
        #                 b64 = base64.b64encode(file.read()).decode()
        #             href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNoil.pdf" style="color: orange;">Download the PDF file</a>'
        #             return href  
        #         st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)   
         
        #         # gaz
        #         plot_axA.plot(dates, y_pred[:,1], color='green')
        #         plot_axA.legend()
        #         plot_axA.set_xlabel("Date")
        #         plot_axA.set_ylabel("Production rate (m³/h)")
        #         st.title("Gas production rate profile")
        #         st.pyplot(plot_figA)
        #          # Enregistrement du plot dans un fichier PDF
        #         def save_plot_to_pdf():
        #             with pdf_backend.PdfPages("plot.pdf") as pdf:
        #                 pdf.savefig(plot_figA)
        #          # Enregistrement du plot dans un fichier PDF
        #         def save_plot_to_pdf():
        #             with pdf_backend.PdfPages("plot.pdf") as pdf:
        #                 pdf.savefig(plot_figA)
        #             with open("plot.pdf", "rb") as file:
        #                 b64 = base64.b64encode(file.read()).decode()
        #             href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNgas.pdf" style="color: orange;">Download the PDF file</a>'
        #             return href
        #         st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)   

        # if global_var[12][2][0] != 0:
        #     # if st.button("RNN - 2Phase - All regim of flow"):
        #         st.subheader("RNN - 2Phase - All regim of flow:")
        #         X = global_var[0][2][1].transform(X_nonT)
        #         X_predict = np.reshape(X, (X.shape[0], 1, X.shape[1]))
        #         y_pred = global_var[0][2][0].predict(X_predict)
        #         y_pred = global_var[0][2][2].inverse_transform(y_pred)
        #         #affichage
        #         df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0], 'Calculated gaz rate': y_pred[:,1]})
        #         st.write('Model calculation results :')
        #         st.write(df_predict)
        #         # Téléchargement du fichier CSV
        #         def download_csv():
        #             csv = df_predict.to_csv(index=False)
        #             b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
        #             href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRNN3Phase_data.csv" style="color: orange;">Click here to download the file CSV</a>'
        #             return href

        #         st.markdown(download_csv(), unsafe_allow_html=True)
        #         # oil
        #         plot_axOR.plot(dates, y_pred[:,0], color='green')
        #         plot_axOR.legend()
        #         plot_axOR.set_xlabel("Date")
        #         plot_axOR.set_ylabel("Production rate (m³/h)")
        #         st.title("Oil production rate profile")
        #         st.pyplot(plot_figOR)
        #         # Enregistrement du plot dans un fichier PDF
        #         def save_plot_to_pdf():
        #             with pdf_backend.PdfPages("plot.pdf") as pdf:
        #                 pdf.savefig(plot_figOR)
        #             with open("plot.pdf", "rb") as file:
        #                 b64 = base64.b64encode(file.read()).decode()
        #             href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNoil.pdf" style="color: orange;">Download the PDF file</a>'
        #             return href

        #         st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)             
        #         # gaz
        #         plot_axR.plot(dates, y_pred[:,1], color='green')
        #         plot_axR.legend()
        #         plot_axR.set_xlabel("Date")
        #         plot_axR.set_ylabel("Production rate (m³/h)")
        #         st.title("Gas production rate profile")
        #         st.pyplot(plot_figR)
        #         # Enregistrement du plot dans un fichier PDF
        #         def save_plot_to_pdf():
        #             with pdf_backend.PdfPages("plot.pdf") as pdf:
        #                 pdf.savefig(plot_figR)
        #             with open("plot.pdf", "rb") as file:
        #                 b64 = base64.b64encode(file.read()).decode()
        #             href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNgas.pdf" style="color: orange;">Download the PDF file</a>'
        #             return href

        #         st.markdown(save_plot_to_pdf(), unsafe_allow_html=True) 

    # 1- All regim of flow + oil :
        if global_var[1][0][0] != 0:
            # if st.button("RFR - oil - All regim of flow"):
                st.subheader("RFR - oil - All regim of flow :")
                # process Ranodm
                X = global_var[1][0][1].transform(X_nonT)
                y_pred = global_var[1][0][0].predict(X)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[1][0][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0]})
                st.write('Model calculation results :')
                st.write(df_predict)
                # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRFRoil_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # oil
                plot_axOR_random.plot(dates, y_pred[:,0],color='green')
                plot_axOR_random.legend()
                plot_axOR_random.set_xlabel("Date")
                plot_axOR_random.set_ylabel("Production rate (m³/h)")
                st.title("Oil production rate profile")
                st.pyplot(plot_figOR_random) 
                # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(plot_figOR_random)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRoil.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            

        if global_var[1][1][0] != 0:
            # if st.button("ANN - Oil - All regim of flow"):
                st.subheader("ANN - Oil - All regim of flow:")
                # process ANN
                X = global_var[1][1][1].transform(X_nonT)
                y_pred = global_var[1][1][0].predict(X)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[1][1][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0]})
                st.write('Model calculation results :')
                st.write(df_predict)
                # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsANNoil_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # oil
                plot_axOR_A.plot(dates, y_pred[:,0],color='green')
                plot_axOR_A.legend()
                plot_axOR_A.set_xlabel("Date")
                plot_axOR_A.set_ylabel("Production rate (m³/h)")
                st.title("Oil production rate profile")
                st.pyplot(plot_figOR_A) 
                # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(plot_figOR_A)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNoil.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            

        if global_var[1][2][0] != 0:
            # if st.button("RNN - Oil - All regim of flow"):
                st.subheader("RNN - Oil - All regim of flow:")
                X = global_var[1][2][1].transform(X_nonT)
                X_predict = np.reshape(X, (X.shape[0], 1, X.shape[1]))
                y_pred = global_var[1][2][0].predict(X_predict)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[1][2][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0]})
                st.write('Model calculation results :')
                st.write(df_predict)
                 # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRNNoil_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # oil
                plot_axOR_R.plot(dates, y_pred[:,0], color='green')
                plot_axOR_R.legend()
                plot_axOR_R.set_xlabel("Date")
                plot_axOR_R.set_ylabel("Production rate (m³/h)")
                st.title("Oil production rate profile")
                st.pyplot(plot_figOR_R) 
                # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(plot_figOR_R)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNoil.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            

    # 2- All regim of flow + gaz :
        if global_var[2][0][0] != 0:
            # if st.button("RFR - gaz - All regim of flow"):
                st.subheader("RFR  - gaz - All regim of flow :")
                # process Ranodm
                X = global_var[2][0][1].transform(X_nonT)
                y_pred = global_var[2][0][0].predict(X)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[2][0][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates,'Calculated gaz rate': y_pred[:,0]})
                st.write('Model calculation results :')
                st.write(df_predict)
                 # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRFRgas_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # gaz
                plot_axGR.plot(dates, y_pred[:,0],color='green')
                plot_axGR.legend()
                plot_axGR.set_xlabel("Date")
                plot_axGR.set_ylabel("Production rate (m³/h)")
                st.title("Gas production rate profile")
                st.pyplot(plot_figGR)
                # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(plot_figGR)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRgas.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

        if global_var[2][1][0] != 0:
            # if st.button("ANN - gaz - All regim of flow"):
                st.subheader("ANN - gaz - All regim of flow:")
                # process ANN
                X = global_var[2][1][1].transform(X_nonT)
                y_pred = global_var[2][1][0].predict(X)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[2][1][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates,'Calculated gaz rate': y_pred[:,0]})
                st.write('Model calculation results :')
                st.write(df_predict)
                 # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsANNgas_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # gaz
                plot_axGA.plot(dates, y_pred[:,0],color='green')
                plot_axGA.legend()
                plot_axGA.set_xlabel("Date")
                plot_axGA.set_ylabel("Production rate (m³/h)")
                st.title("Gas production rate profile ")
                st.pyplot(plot_figGA)
                    # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(plot_figGA)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNgas.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

        if global_var[2][2][0] != 0:
            # if st.button("RNN - gaz - All regim of flow"):
                st.subheader("RNN - gaz - All regim of flow:")
                X = global_var[2][2][1].transform(X_nonT)
                X_predict = np.reshape(X, (X.shape[0], 1, X.shape[1]))
                y_pred = global_var[2][2][0].predict(X_predict)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[2][2][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates,'Calculated gaz rate': y_pred[:,0]})
                st.write('Model calculation results :')
                st.write(df_predict)
                 # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRNNgas_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # gaz
                plot_axGRNN.plot(dates, y_pred[:,0], color='green')
                plot_axGRNN.legend()
                plot_axGRNN.set_xlabel("Date")
                plot_axGRNN.set_ylabel("Production rate (m³/h)")
                st.title("Gas production rate profile")
                st.pyplot(plot_figGRNN)
                     # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(plot_figGRNN)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNgas.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

    # 9- All regim of flow + water :
        if global_var[9][0][0] != 0:
            # if st.button("RFR - Water - All regim of flow"):
                st.subheader("RFR  - Water - All regim of flow :")
                # process Ranodm
                X = global_var[9][0][1].transform(X_nonT)
                y_pred = global_var[9][0][0].predict(X)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[9][0][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates,'Calculated water rate': y_pred[:,0]})
                st.write('Model calculation results :')
                st.write(df_predict)
                 # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRFRwater_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # water
                plot_axW.plot(dates, y_pred[:,0],color='green')
                plot_axW.legend()
                plot_axW.set_xlabel("Date")
                plot_axW.set_ylabel("Production rate (l/h)")
                st.title("Water production rate profile")
                st.pyplot(plot_figW)
                     # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(plot_figW)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRwater.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

        if global_var[9][1][0] != 0:
            # if st.button("ANN - Water - All regim of flow"):
                st.subheader("ANN - Water - All regim of flow:")
                # process ANN
                X = global_var[9][1][1].transform(X_nonT)
                y_pred = global_var[9][1][0].predict(X)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[9][1][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates,'Calculated water rate': y_pred[:,0]})
                st.write('Model calculation results :')
                st.write(df_predict)
                 # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsANNwater_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # water
                plot_axWA.plot(dates, y_pred[:,0],color='green')
                plot_axWA.legend()
                plot_axWA.set_xlabel("Date")
                plot_axWA.set_ylabel("Production rate (l/h)")
                st.title("Water production rate profile")
                st.pyplot(plot_figWA)
                           # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(plot_figWA)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNwater.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

        if global_var[9][2][0] != 0:
            # if st.button("RNN - Water - All regim of flow"):
                st.subheader("RNN - Water - All regim of flow:")
                X = global_var[9][2][1].transform(X_nonT)
                X_predict = np.reshape(X, (X.shape[0], 1, X.shape[1]))
                y_pred = global_var[9][2][0].predict(X_predict)
                y_pred = y_pred.reshape(-1, 1)
                y_pred = global_var[9][2][2].inverse_transform(y_pred)
                #affichage
                df_predict = pd.DataFrame({'START_DATE': dates,'Calculated water rate': y_pred[:,0]})
                st.write('Model calculation results :')
                st.write(df_predict)
                # Téléchargement du fichier CSV
                def download_csv():
                    csv = df_predict.to_csv(index=False)
                    b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                    href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRNNwater_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                    return href

                st.markdown(download_csv(), unsafe_allow_html=True)
                # water
                plot_axWR.plot(dates, y_pred[:,0],color='green')
                plot_axWR.legend()
                plot_axWR.set_xlabel("Date")
                plot_axWR.set_ylabel("Production rate (l/h)")
                st.title("Water production rate profile")
                st.pyplot(plot_figWR)
                           # Enregistrement du plot dans un fichier PDF
                def save_plot_to_pdf():
                    with pdf_backend.PdfPages("plot.pdf") as pdf:
                        pdf.savefig(plot_figWR)
                    with open("plot.pdf", "rb") as file:
                        b64 = base64.b64encode(file.read()).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNwater.pdf" style="color: orange;">Download the PDF file</a>'
                    return href

                st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

#*************** regime Critical only ***************
    if not np.all(global_var1[3] == 0) or not np.all(global_var1[4] == 0) or not np.all(global_var1[5] == 0) or not np.all(global_var1[10] == 0): 
        # Convertir la colonne 'START_DATE' en datetime avec le format d'origine
        dataC = data
        id = dataC['ID'].iloc[0]
        dataC = dataC.drop(dataC[dataC['FLP'] / dataC['WHP'] > 0.75].index)
        dates = dataC['START_DATE']
        # Extraire les caractéristiqueS
        X_nonT = dataC[['ID','jour', 'month', 'year', 'CHOKE', 'WHP', 'FLP']]
        if X_nonT.empty:
            st.warning('The predicted values are all belongs to the critical regime .!!')
        else:
            # extract needed data from dj
            djC = dj
            djC['START_DATE'] = pd.to_datetime(djC['START_DATE'])
            filtered_dj = djC[djC['ID'] == id]
            filtered_dj = filtered_dj.drop(filtered_dj[filtered_dj['FLP'] / filtered_dj['WHP'] > 0.75].index)
            filtered_dj.sort_values(by='START_DATE', inplace=True)
        # 3- Critical + 2phase :
            if global_var[3][0][0] != 0:
                # if st.button("RFR - 2Phase - Critical"):
                    st.subheader("RFR - 2Phase - Critical:")
                    # process Ranodm
                    X = global_var[3][0][1].transform(X_nonT)
                    y_pred = global_var[3][0][0].predict(X)
                    y_pred = global_var[3][0][2].inverse_transform(y_pred)
                    #affichage
                    df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0], 'Calculated gaz rate': y_pred[:,1]})
                    st.write('Production rate (m³/h) :')
                    st.write(df_predict)
                    # Téléchargement du fichier CSV
                    def download_csv():
                        csv = df_predict.to_csv(index=False)
                        b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                        href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRFRCritical3Phase_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                        return href

                    st.markdown(download_csv(), unsafe_allow_html=True)
                    # oil
                    plot_axOC.plot(dates, y_pred[:,0], color='green')
                    plot_axOC.legend()
                    plot_axOC.set_xlabel("Date")
                    plot_axOC.set_ylabel("Production rate (m³/h)")
                    st.title("Oil production rate profile")
                    st.pyplot(plot_figOC)
                    # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figOC)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRCritical3oil.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            
                    # gaz
                    plot_axC.plot(dates, y_pred[:,1], color='green')
                    plot_axC.legend()
                    plot_axC.set_xlabel("Date")
                    plot_axC.set_ylabel("Production rate (m³/h)")
                    st.title("Gas production rate profile")
                    st.pyplot(plot_figC)
                    # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figC)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRCritical3gas.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

            if global_var[3][1][0] != 0:
                # if st.button("ANN - 2Phase - Critical"):
                    st.subheader("ANN - 2Phase - Critical:")
                    # process ANN
                    X = global_var[3][1][1].transform(X_nonT)
                    y_pred = global_var[3][1][0].predict(X)
                    y_pred = global_var[3][1][2].inverse_transform(y_pred)
                    #affichage
                    df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0], 'Calculated gaz rate': y_pred[:,1]})
                    st.write('Model calculation results :')
                    st.write(df_predict)
                    # Téléchargement du fichier CSV
                    def download_csv():
                        csv = df_predict.to_csv(index=False)
                        b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                        href = f'<a href="data:file/csv;base64,{b64}" download="ResultsANNCritical3Phase_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                        return href

                    st.markdown(download_csv(), unsafe_allow_html=True)
                    # oil
                    plot_axOCA.plot(dates, y_pred[:,0], color='green')
                    plot_axOCA.legend()
                    plot_axOCA.set_xlabel("Date")
                    plot_axOCA.set_ylabel("Production rate (m³/h)")
                    st.title("Oil production rate profile")
                    st.pyplot(plot_figOCA)
                    # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figOCA)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNCritical3oil.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            
                    # gaz
                    plot_axCA.plot(dates, y_pred[:,1], color='green')
                    plot_axCA.legend()
                    plot_axCA.set_xlabel("Date")
                    plot_axCA.set_ylabel("Production rate (m³/h)")
                    st.title("Gas production rate profile")
                    st.pyplot(plot_figCA)
                    # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figCA)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNCritical3gas.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

            if global_var[3][2][0] != 0:
                # if st.button("RNN - 2Phase - Critical"):
                    st.subheader("RNN - 2Phase - Critical:")
                    X = global_var[3][2][1].transform(X_nonT)
                    X_predict = np.reshape(X, (X.shape[0], 1, X.shape[1]))
                    y_pred = global_var[3][2][0].predict(X_predict)
                    y_pred = global_var[3][2][2].inverse_transform(y_pred)
                    #affichage
                    df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0], 'Calculated gaz rate': y_pred[:,1]})
                    st.write('Model calculation results :')
                    st.write(df_predict)
                    # Téléchargement du fichier CSV
                    def download_csv():
                        csv = df_predict.to_csv(index=False)
                        b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                        href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRNNCritical3Phase_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                        return href

                    st.markdown(download_csv(), unsafe_allow_html=True)
                    # oil
                    plot_axOCR.plot(dates, y_pred[:,0], color='green')
                    plot_axOCR.legend()
                    plot_axOCR.set_xlabel("Date")
                    plot_axOCR.set_ylabel("Production rate (m³/h)")
                    st.title("Oil production rate profile")
                    st.pyplot(plot_figOCR)
                    # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figOCR)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNCritical3oil.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            
                    # gaz
                    plot_axCR.plot(dates, y_pred[:,1], color='green')
                    plot_axCR.legend()
                    plot_axCR.set_xlabel("Date")
                    plot_axCR.set_ylabel("Production rate (m³/h)")
                    st.title("Gas production rate profile")
                    st.pyplot(plot_figCR)
                    # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figCR)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNCritical3gas.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

        # 4- Critical + oil :
            if global_var[4][0][0] != 0:
                # if st.button("RFR - oil - Critical"):
                    st.write(X_nonT)
                    st.subheader("RFR - oil - Critical :")
                    # process Ranodm
                    X = global_var[4][0][1].transform(X_nonT)
                    y_pred = global_var[4][0][0].predict(X)
                    y_pred = y_pred.reshape(-1, 1)
                    y_pred = global_var[4][0][2].inverse_transform(y_pred)
                    #affichage
                    df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0]})
                    st.write('Model calculation results :')
                    st.write(df_predict)
                    # Téléchargement du fichier CSV
                    def download_csv():
                        csv = df_predict.to_csv(index=False)
                        b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                        href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRFRCriticaloil_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                        return href

                    st.markdown(download_csv(), unsafe_allow_html=True)
                    # oil
                    plot_axOC_only.plot(dates, y_pred[:,0], color='green')
                    plot_axOC_only.legend()
                    plot_axOC_only.set_xlabel("Date")
                    plot_axOC_only.set_ylabel("Production rate (m³/h)")
                    st.title("Oil production rate profile")
                    st.pyplot(plot_figOC_only)
                    # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figOC_only)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRCriticaloil.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            

            if global_var[4][1][0] != 0:
                # if st.button("ANN - Oil - Critical"):
                    st.subheader("ANN - Oil - Critical:")
                    # process ANN
                    X = global_var[4][1][1].transform(X_nonT)
                    y_pred = global_var[4][1][0].predict(X)
                    y_pred = y_pred.reshape(-1, 1)
                    y_pred = global_var[4][1][2].inverse_transform(y_pred)
                    #affichage
                    df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0]})
                    st.write('Model calculation results :')
                    st.write(df_predict)
                        # Téléchargement du fichier CSV
                    def download_csv():
                        csv = df_predict.to_csv(index=False)
                        b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                        href = f'<a href="data:file/csv;base64,{b64}" download="ResultsANNCriticaloil_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                        return href

                    st.markdown(download_csv(), unsafe_allow_html=True)
                    # oil
                    plot_axOCA_only.plot(dates, y_pred[:,0], color='green')
                    plot_axOCA_only.legend()
                    plot_axOCA_only.set_xlabel("Date")
                    plot_axOCA_only.set_ylabel("Production rate (m³/h)")
                    st.title("Oil production rate profile")
                    st.pyplot(plot_figOCA_only) 
                    # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figOC_only)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PloANNCriticaloilt.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            

            if global_var[4][2][0] != 0:
                # if st.button("RNN - Oil - Critical"):
                    st.subheader("RNN - Oil - Critical:")
                    X = global_var[4][2][1].transform(X_nonT)
                    X_predict = np.reshape(X, (X.shape[0], 1, X.shape[1]))
                    y_pred = global_var[4][2][0].predict(X_predict)
                    y_pred = y_pred.reshape(-1, 1)
                    y_pred = global_var[4][2][2].inverse_transform(y_pred)
                    #affichage
                    df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0]})
                    st.write('Model calculation results :')
                    st.write(df_predict)
                    # Téléchargement du fichier CSV
                    def download_csv():
                        csv = df_predict.to_csv(index=False)
                        b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                        href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRNNCriticaloil_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                        return href

                    st.markdown(download_csv(), unsafe_allow_html=True)
                    # oil
                    plot_axOCR_only.plot(dates, y_pred[:,0], color='green')
                    plot_axOCR_only.legend()
                    plot_axOCR_only.set_xlabel("Date")
                    plot_axOCR_only.set_ylabel("Production rate (m³/h)")
                    st.title("Oil production rate profile")
                    st.pyplot(plot_figOCR_only)
                    # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figOCR_only)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNCriticaloil.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            

        # 5- Critical + gaz :
            if global_var[5][0][0] != 0:
                # if st.button("RFR - gaz - Critical"):
                    st.subheader("RFR  - gaz - Critical :")
                    # process Ranodm
                    X = global_var[5][0][1].transform(X_nonT)
                    y_pred = global_var[5][0][0].predict(X)
                    y_pred = y_pred.reshape(-1, 1)
                    y_pred = global_var[5][0][2].inverse_transform(y_pred)
                    #affichage
                    df_predict = pd.DataFrame({'START_DATE': dates,'Calculated gaz rate': y_pred[:,0]})
                    st.write('Model calculation results :')
                    st.write(df_predict)
                    # Téléchargement du fichier CSV
                    def download_csv():
                        csv = df_predict.to_csv(index=False)
                        b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                        href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRFRCriticalgas_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                        return href

                    st.markdown(download_csv(), unsafe_allow_html=True)
                    # gaz
                    plot_axC_only.plot(dates, y_pred[:,0], color='green')
                    plot_axC_only.legend()
                    plot_axC_only.set_xlabel("Date")
                    plot_axC_only.set_ylabel("Production rate (m³/h)")
                    st.title("Gas production rate profile")
                    st.pyplot(plot_figC_only)
                    # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figC_only)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRCriticalgas.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

            if global_var[5][1][0] != 0:
                # if st.button("ANN - gaz - Critical"):
                    st.subheader("ANN - gaz - Critical:")
                    # process ANN
                    X = global_var[5][1][1].transform(X_nonT)
                    y_pred = global_var[5][1][0].predict(X)
                    y_pred = y_pred.reshape(-1, 1)
                    y_pred = global_var[5][1][2].inverse_transform(y_pred)
                    #affichage
                    df_predict = pd.DataFrame({'START_DATE': dates,'Calculated gaz rate': y_pred[:,0]})
                    st.write('Model calculation results :')
                    st.write(df_predict)
                    # Téléchargement du fichier CSV
                    def download_csv():
                        csv = df_predict.to_csv(index=False)
                        b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                        href = f'<a href="data:file/csv;base64,{b64}" download="ResultsANNCriticalgas_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                        return href

                    st.markdown(download_csv(), unsafe_allow_html=True)
                    # gaz
                    plot_axCA_only.plot(dates, y_pred[:,0], color='green')
                    plot_axCA_only.legend()
                    plot_axCA_only.set_xlabel("Date")
                    plot_axCA_only.set_ylabel("Production rate (m³/h)")
                    st.title("Gas production rate profile")
                    st.pyplot(plot_figCA_only)
                    # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figCA_only)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNCriticalgas.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

            if global_var[5][2][0] != 0:
                # if st.button("RNN - gaz - Critical"):
                    st.subheader("RNN - gaz - Critical:")
                    X = global_var[5][2][1].transform(X_nonT)
                    X_predict = np.reshape(X, (X.shape[0], 1, X.shape[1]))
                    y_pred = global_var[5][2][0].predict(X_predict)
                    y_pred = y_pred.reshape(-1, 1)
                    y_pred = global_var[5][2][2].inverse_transform(y_pred)
                    #affichage
                    df_predict = pd.DataFrame({'START_DATE': dates,'Calculated gaz rate': y_pred[:,0]})
                    st.write('Model calculation results :')
                    st.write(df_predict)
                    # Téléchargement du fichier CSV
                    def download_csv():
                        csv = df_predict.to_csv(index=False)
                        b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                        href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRNNCriticalgas_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                        return href

                    st.markdown(download_csv(), unsafe_allow_html=True)
                    # gaz
                    plot_axRC_only.plot(dates, y_pred[:,0], color='green')
                    plot_axRC_only.legend()
                    plot_axRC_only.set_xlabel("Date")
                    plot_axRC_only.set_ylabel("Production rate (m³/h)")
                    st.title("Gas production rate profile")
                    st.pyplot(plot_figRC_only)
                    # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figRC_only)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNCriticalgas.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

        # 10- Critical + water :
            if global_var[10][0][0] != 0:
                # if st.button("RFR - Water - Critical"):
                    st.subheader("RFR  - Water - Critical :")
                    # process Ranodm
                    X = global_var[10][0][1].transform(X_nonT)
                    y_pred = global_var[10][0][0].predict(X)
                    y_pred = y_pred.reshape(-1, 1)
                    y_pred = global_var[10][0][2].inverse_transform(y_pred)
                    #affichage
                    df_predict = pd.DataFrame({'START_DATE': dates,'Calculated water rate': y_pred[:,0]})
                    st.write('Model calculation results :')
                    st.write(df_predict)
                    # Téléchargement du fichier CSV
                    def download_csv():
                        csv = df_predict.to_csv(index=False)
                        b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                        href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRFRCriticalwater_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                        return href

                    st.markdown(download_csv(), unsafe_allow_html=True)
                    # gaz
                    plot_axWC_only.plot(dates, y_pred[:,0], color='green')
                    plot_axWC_only.legend()
                    plot_axWC_only.set_xlabel("Date")
                    plot_axWC_only.set_ylabel("Production rate (l/h)")
                    st.title("Water production rate profile")
                    st.pyplot(plot_figWC_only)
                    # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figWC_only)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRCriticalwater.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

            if global_var[10][1][0] != 0:
                # if st.button("ANN - Water - Critical"):
                    st.subheader("ANN - Water - Critical:")
                    # process ANN
                    X = global_var[10][1][1].transform(X_nonT)
                    y_pred = global_var[10][1][0].predict(X)
                    y_pred = y_pred.reshape(-1, 1)
                    y_pred = global_var[10][1][2].inverse_transform(y_pred)
                    #affichage
                    df_predict = pd.DataFrame({'START_DATE': dates,'Calculated water rate': y_pred[:,0]})
                    st.write('Model calculation results :')
                    st.write(df_predict)
                    # Téléchargement du fichier CSV
                    def download_csv():
                        csv = df_predict.to_csv(index=False)
                        b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                        href = f'<a href="data:file/csv;base64,{b64}" download="ResultsANNCriticalwater_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                        return href

                    st.markdown(download_csv(), unsafe_allow_html=True)
                    # water
                    plot_axWCA_only.plot(dates, y_pred[:,0], color='green')
                    plot_axWCA_only.legend()
                    plot_axWCA_only.set_xlabel("Date")
                    plot_axWCA_only.set_ylabel("Production rate (l/h)")
                    st.title("Water production rate profile")
                    st.pyplot(plot_figWCA_only)
                    # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figWCA_only)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNCriticalwater.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

            if global_var[10][2][0] != 0:
                # if st.button("RNN - Water - Critical"):
                    st.subheader("RNN - Water - Critical:")
                    X = global_var[10][2][1].transform(X_nonT)
                    X_predict = np.reshape(X, (X.shape[0], 1, X.shape[1]))
                    y_pred = global_var[10][2][0].predict(X_predict)
                    y_pred = y_pred.reshape(-1, 1)
                    y_pred = global_var[10][2][2].inverse_transform(y_pred)
                    #affichage
                    df_predict = pd.DataFrame({'START_DATE': dates,'Calculated water rate': y_pred[:,0]})
                    st.write('Model calculation results :')
                    st.write(df_predict)
                    # Téléchargement du fichier CSV
                    def download_csv():
                        csv = df_predict.to_csv(index=False)
                        b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                        href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRNNCriticalwater_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                        return href

                    st.markdown(download_csv(), unsafe_allow_html=True)
                    # water
                    plot_axWCR_only.plot(dates, y_pred[:,0], color='green')
                    plot_axWCR_only.legend()
                    plot_axWCR_only.set_xlabel("Date")
                    plot_axWCR_only.set_ylabel("Production rate (l/h)")
                    st.title("Water production rate profile")
                    st.pyplot(plot_figWCR_only)
                    # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figWCR_only)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNCriticalwater.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

#*************** regime Uncritical only ***************
    if not np.all(global_var1[6] == 0) or not np.all(global_var1[7] == 0) or not np.all(global_var1[8] == 0) or not np.all(global_var1[11] == 0):
        dataNC = data 
        id = dataNC['ID'].iloc[0]
        dataNC = dataNC.drop(dataNC[dataNC['FLP'] / dataNC['WHP'] < 0.75].index)
        dates = dataNC['START_DATE']
        # Extraire les caractéristiqueS
        X_nonT = dataNC[['ID','jour', 'month', 'year', 'CHOKE', 'WHP', 'FLP']]
        if X_nonT.empty:
            st.warning('The predicted values are all belongs to the uncritical regime .!!')
        else:
        # extract needed data from dj
            djNC = dj
            djNC['START_DATE'] = pd.to_datetime(djNC['START_DATE'])
            filtered_dj = djNC[djNC['ID'] == id]
            filtered_dj = filtered_dj.drop(filtered_dj[filtered_dj['FLP'] / filtered_dj['WHP'] < 0.75].index)
            filtered_dj.sort_values(by='START_DATE', inplace=True)
        # 6- Uncritical + 2phase :
            if global_var[6][0][0] != 0:
                # if st.button("RFR - 2Phase - Uncritical"):
                    st.subheader("RFR - 2Phase - Uncritical:")
                    # process Ranodm
                    X = global_var[6][0][1].transform(X_nonT)
                    y_pred = global_var[6][0][0].predict(X)
                    y_pred = global_var[6][0][2].inverse_transform(y_pred)
                    #affichage
                    df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0], 'Calculated gaz rate': y_pred[:,1]})
                    st.write('Model calculation results :')
                    st.write(df_predict)
                    # Téléchargement du fichier CSV
                    def download_csv():
                        csv = df_predict.to_csv(index=False)
                        b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                        href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRFRnonCritical3Phase_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                        return href

                    st.markdown(download_csv(), unsafe_allow_html=True)
                    # oil
                    plot_axONC.plot(dates, y_pred[:,0],color='green')
                    plot_axONC.legend()
                    plot_axONC.set_xlabel("Date")
                    plot_axONC.set_ylabel("Production rate (m³/h)  ")
                    st.title("Oil production rate profile")
                    st.pyplot(plot_figONC)
                    # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figONC)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRnonCritical3oil.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            
                    # gaz
                    plot_axNC.plot(dates, y_pred[:,1], color='green')
                    plot_axNC.legend()
                    plot_axNC.set_xlabel("Date")
                    plot_axNC.set_ylabel("Production rate (m³/h)  ")
                    st.title("Gas production rate profile")
                    st.pyplot(plot_figNC)
                    # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figNC)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRnonCritical3gas.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

            if global_var[6][1][0] != 0:
                # if st.button("ANN - 2Phase - Uncritical"):
                    st.subheader("ANN - 2Phase - Uncritical:")
                    # process ANN
                    X = global_var[6][1][1].transform(X_nonT)
                    y_pred = global_var[6][1][0].predict(X)
                    y_pred = global_var[6][1][2].inverse_transform(y_pred)
                    #affichage
                    df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0], 'Calculated gaz rate': y_pred[:,1]})
                    st.write('Model calculation results :')
                    st.write(df_predict)
                    # Téléchargement du fichier CSV
                    def download_csv():
                        csv = df_predict.to_csv(index=False)
                        b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                        href = f'<a href="data:file/csv;base64,{b64}" download="ResultsANNnonCritical3Phase_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                        return href

                    st.markdown(download_csv(), unsafe_allow_html=True)
                    # oil
                    plot_axONCA.plot(dates, y_pred[:,0], color='green')
                    plot_axONCA.legend()
                    plot_axONCA.set_xlabel("Date")
                    plot_axONCA.set_ylabel("Production rate (m³/h)  ")
                    st.title("Oil production rate profile")
                    st.pyplot(plot_figONCA)
                    # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figONCA)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNnonCritical3oil.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            
                    # gaz
                    plot_axNCA.plot(dates, y_pred[:,1], color='green')
                    plot_axNCA.legend()
                    plot_axNCA.set_xlabel("Date")
                    plot_axNCA.set_ylabel("Production rate (m³/h)  ")
                    st.title("Gas production rate profile")
                    st.pyplot(plot_figNCA)
                    # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figNCA)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNnonCritical3gas.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

            if global_var[6][2][0] != 0:
                # if st.button("RNN - 2Phase - Uncritical"):
                    st.subheader("RNN - 2Phase - Uncritical:")
                    X = global_var[6][2][1].transform(X_nonT)
                    X_predict = np.reshape(X, (X.shape[0], 1, X.shape[1]))
                    y_pred = global_var[6][2][0].predict(X_predict)
                    y_pred = global_var[6][2][2].inverse_transform(y_pred)
                    #affichage
                    df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0], 'Calculated gaz rate': y_pred[:,1]})
                    st.write('Model calculation results :')
                    st.write(df_predict)
                    # Téléchargement du fichier CSV
                    def download_csv():
                        csv = df_predict.to_csv(index=False)
                        b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                        href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRNNnonCritical3Phase_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                        return href

                    st.markdown(download_csv(), unsafe_allow_html=True)
                    # oil
                    plot_axONCR.plot(dates, y_pred[:,0], color='green')
                    plot_axONCR.legend()
                    plot_axONCR.set_xlabel("Date")
                    plot_axONCR.set_ylabel("Production rate (m³/h)  ")
                    st.title("Oil production rate profile")
                    st.pyplot(plot_figONCR)
                    # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figONCR)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNnonCritical3oil.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            
                    # gaz
                    plot_axNCR.plot(dates, y_pred[:,1], color='green')
                    plot_axNCR.legend()
                    plot_axNCR.set_xlabel("Date")
                    plot_axNCR.set_ylabel("Production rate (m³/h)  ")
                    st.title("Gas production rate profile")
                    st.pyplot(plot_figNCR)
                    # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figNCR)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNnonCritical3gas.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)

        # 6- Uncritical + oil :
            if global_var[7][0][0] != 0:
                # if st.button("RFR - oil - Uncritical"):
                    st.subheader("RFR - oil - Uncritical :")
                    # process Ranodm
                    X = global_var[7][0][1].transform(X_nonT)
                    y_pred = global_var[7][0][0].predict(X)
                    y_pred = y_pred.reshape(-1, 1)
                    y_pred = global_var[7][0][2].inverse_transform(y_pred)
                    #affichage
                    df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0]})
                    st.write('Model calculation results :')
                    st.write(df_predict)
                    # Téléchargement du fichier CSV
                    def download_csv():
                        csv = df_predict.to_csv(index=False)
                        b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                        href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRFRnonCriticaloil_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                        return href

                    st.markdown(download_csv(), unsafe_allow_html=True)
                    # oil
                    plot_axONC_only.plot(dates, y_pred[:,0],color='green')
                    plot_axONC_only.legend()
                    plot_axONC_only.set_xlabel("Date")
                    plot_axONC_only.set_ylabel("Production rate (m³/h)  ")
                    st.title("Oil production rate profile")
                    st.pyplot(plot_figONC_only) 
                        # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figONC_only)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRnonCriticaloil.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)           

            if global_var[7][1][0] != 0:
                # if st.button("ANN - Oil - Uncritical"):
                    st.subheader("ANN - Oil - Uncritical:")
                    # process ANN
                    X = global_var[7][1][1].transform(X_nonT)
                    y_pred = global_var[7][1][0].predict(X)
                    y_pred = y_pred.reshape(-1, 1)
                    y_pred = global_var[7][1][2].inverse_transform(y_pred)
                    #affichage
                    df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0]})
                    st.write('Model calculation results :')
                    st.write(df_predict)
                    # Téléchargement du fichier CSV
                    def download_csv():
                        csv = df_predict.to_csv(index=False)
                        b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                        href = f'<a href="data:file/csv;base64,{b64}" download="ResultsANNnonCriticaloil_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                        return href

                    st.markdown(download_csv(), unsafe_allow_html=True)
                    # oil
                    plot_axONCA_only.plot(dates, y_pred[:,0], color='green')
                    plot_axONCA_only.legend()
                    plot_axONCA_only.set_xlabel("Date")
                    plot_axONCA_only.set_ylabel("Production rate (m³/h)  ")
                    st.title("Oil production rate profile")
                    st.pyplot(plot_figONCA_only) 
                    # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figONCA_only)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNnonCriticaloil.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            

            if global_var[7][2][0] != 0:
                # if st.button("RNN - Oil - Uncritical"):
                    st.subheader("RNN - Oil - Uncritical:")
                    X = global_var[7][2][1].transform(X_nonT)
                    X_predict = np.reshape(X, (X.shape[0], 1, X.shape[1]))
                    y_pred = global_var[7][2][0].predict(X_predict)
                    y_pred = y_pred.reshape(-1, 1)
                    y_pred = global_var[7][2][2].inverse_transform(y_pred)
                    #affichage
                    df_predict = pd.DataFrame({'START_DATE': dates, 'Calculated oil rate': y_pred[:,0]})
                    st.write('Model calculation results :')
                    st.write(df_predict)
                    # Téléchargement du fichier CSV
                    def download_csv():
                        csv = df_predict.to_csv(index=False)
                        b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                        href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRNNnonCriticaloil_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                        return href

                    st.markdown(download_csv(), unsafe_allow_html=True)
                    # oil
                    plot_axONCR_only.plot(dates, y_pred[:,0], color='green')
                    plot_axONCR_only.legend()
                    plot_axONCR_only.set_xlabel("Date")
                    plot_axONCR_only.set_ylabel("Production rate (m³/h)  ")
                    st.title("Oil production rate profile")
                    st.pyplot(plot_figONCR_only)
                    # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figONCR_only)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNnonCriticaloil.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)            

        # 6- Uncritical + gaz :
            if global_var[8][0][0] != 0:
                # if st.button("RFR - gaz - Uncritical"):
                    st.subheader("RFR  - gaz - Uncritical :")
                    # process Ranodm
                    st.write(X_nonT)
                    X = global_var[8][0][1].transform(X_nonT)
                    y_pred = global_var[8][0][0].predict(X)
                    y_pred = y_pred.reshape(-1, 1)
                    y_pred = global_var[8][0][2].inverse_transform(y_pred)
                    #affichage
                    df_predict = pd.DataFrame({'START_DATE': dates,'Calculated gaz rate': y_pred[:,0]})
                    st.write('Model calculation results :')
                    st.write(df_predict)
                    # Téléchargement du fichier CSV
                    def download_csv():
                        csv = df_predict.to_csv(index=False)
                        b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                        href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRFRnonCriticalgas_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                        return href

                    st.markdown(download_csv(), unsafe_allow_html=True)
                    # gaz
                    plot_axNC_only.plot(dates, y_pred[:,0],color='green')
                    plot_axNC_only.legend()
                    plot_axNC_only.set_xlabel("Date")
                    plot_axNC_only.set_ylabel("Production rate (m³/h)  ")
                    st.title("Gas production rate profile")
                    st.pyplot(plot_figNC_only)
                    # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figNC_only)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRnonCriticalgas.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True) 

            if global_var[8][1][0] != 0:
                # if st.button("ANN - gaz - Uncritical"):
                    st.subheader("ANN - gaz - Uncritical:")
                    # process ANN
                    X = global_var[8][1][1].transform(X_nonT)
                    y_pred = global_var[8][1][0].predict(X)
                    y_pred = y_pred.reshape(-1, 1)
                    y_pred = global_var[8][1][2].inverse_transform(y_pred)
                    #affichage
                    df_predict = pd.DataFrame({'START_DATE': dates,'Calculated gaz rate': y_pred[:,0]})
                    st.write('Model calculation results :')
                    st.write(df_predict)
                    # Téléchargement du fichier CSV
                    def download_csv():
                        csv = df_predict.to_csv(index=False)
                        b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                        href = f'<a href="data:file/csv;base64,{b64}" download="ResultsANNnonCriticalgas_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                        return href

                    st.markdown(download_csv(), unsafe_allow_html=True)
                    # gaz
                    plot_axNCA_only.plot(dates, y_pred[:,0], color='green')
                    plot_axNCA_only.legend()
                    plot_axNCA_only.set_xlabel("Date")
                    plot_axNCA_only.set_ylabel("Production rate (m³/h)  ")
                    st.title("Gas production rate profile")
                    st.pyplot(plot_figNCA_only)
                    # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figNCA_only)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNnonCriticalgas.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True) 

            if global_var[8][2][0] != 0:
                # if st.button("RNN - gaz - Uncritical"):
                    st.subheader("RNN - gaz - Uncritical:")
                    X = global_var[8][2][1].transform(X_nonT)
                    X_predict = np.reshape(X, (X.shape[0], 1, X.shape[1]))
                    y_pred = global_var[8][2][0].predict(X_predict)
                    y_pred = y_pred.reshape(-1, 1)
                    y_pred = global_var[8][2][2].inverse_transform(y_pred)
                    #affichage
                    df_predict = pd.DataFrame({'START_DATE': dates,'Calculated gaz rate': y_pred[:,0]})
                    st.write('Model calculation results :')
                    st.write(df_predict)
                    # Téléchargement du fichier CSV
                    def download_csv():
                        csv = df_predict.to_csv(index=False)
                        b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                        href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRNNnonCriticalgas_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                        return href

                    st.markdown(download_csv(), unsafe_allow_html=True)
                    # gaz
                    plot_axNCR_only.plot(dates, y_pred[:,0], color='green')
                    plot_axNCR_only.legend()
                    plot_axNCR_only.set_xlabel("Date")
                    plot_axNCR_only.set_ylabel("Production rate (m³/h)  ")
                    st.title("Gas production rate profile")
                    st.pyplot(plot_figNCR_only)
                    # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figNCR_only)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNnonCriticalgas.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True) 

        # 11- Uncritical + water :
            if global_var[11][0][0] != 0:
                # if st.button("RFR - Water - Uncritical"):
                    st.subheader("RFR  - Water - Uncritical :")
                    # process Ranodm
                    X = global_var[11][0][1].transform(X_nonT)
                    y_pred = global_var[11][0][0].predict(X)
                    y_pred = y_pred.reshape(-1, 1)
                    y_pred = global_var[11][0][2].inverse_transform(y_pred)
                    #affichage
                    df_predict = pd.DataFrame({'START_DATE': dates,'Calculated water rate': y_pred[:,0]})
                    st.write('Model calculation results :')
                    st.write(df_predict)
                    # Téléchargement du fichier CSV
                    def download_csv():
                        csv = df_predict.to_csv(index=False)
                        b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                        href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRFRnonCriticalwater_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                        return href

                    st.markdown(download_csv(), unsafe_allow_html=True)
                    # water
                    plot_axWNC_only.plot(dates, y_pred[:,0],color='green')
                    plot_axWNC_only.legend()
                    plot_axWNC_only.set_xlabel("Date")
                    plot_axWNC_only.set_ylabel("Production rate (l/h) ")
                    st.title("Water production rate profile")
                    st.pyplot(plot_figWNC_only)
                    # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figWNC_only)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRFRnonCriticalwater.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True) 

            if global_var[11][1][0] != 0:
                # if st.button("ANN - Water - Uncritical"):
                    st.subheader("ANN - Water - Uncritical:")
                    # process ANN
                    X = global_var[11][1][1].transform(X_nonT)
                    y_pred = global_var[11][1][0].predict(X)
                    y_pred = y_pred.reshape(-1, 1)
                    y_pred = global_var[11][1][2].inverse_transform(y_pred)
                    #affichage
                    df_predict = pd.DataFrame({'START_DATE': dates,'Calculated water rate': y_pred[:,0]})
                    st.write('Model calculation results :')
                    st.write(df_predict)
                    # Téléchargement du fichier CSV
                    def download_csv():
                        csv = df_predict.to_csv(index=False)
                        b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                        href = f'<a href="data:file/csv;base64,{b64}" download="ResultsANNnonCriticalwater_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                        return href

                    st.markdown(download_csv(), unsafe_allow_html=True)
                    # water
                    plot_axWNCA_only.plot(dates, y_pred[:,0],color='green')
                    plot_axWNCA_only.legend()
                    plot_axWNCA_only.set_xlabel("Date")
                    plot_axWNCA_only.set_ylabel("Production rate (l/h) ")
                    st.title("Water production rate profile")
                    st.pyplot(plot_figWNCA_only)
                    # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figWNCA_only)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotANNnonCriticalwater.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True) 

            if global_var[11][2][0] != 0:
                # if st.button("RNN - Water - Uncritical"):
                    st.subheader("RNN - Water - Uncritical:")
                    X = global_var[11][2][1].transform(X_nonT)
                    X_predict = np.reshape(X, (X.shape[0], 1, X.shape[1]))
                    y_pred = global_var[11][2][0].predict(X_predict)
                    y_pred = y_pred.reshape(-1, 1)
                    y_pred = global_var[11][2][2].inverse_transform(y_pred)
                    #affichage
                    df_predict = pd.DataFrame({'START_DATE': dates,'Calculated water rate': y_pred[:,0]})
                    st.write('Model calculation results :')
                    st.write(df_predict)
                    # Téléchargement du fichier CSV
                    def download_csv():
                        csv = df_predict.to_csv(index=False)
                        b64 = base64.b64encode(csv.encode()).decode()  # Encodage du fichier en base64
                        href = f'<a href="data:file/csv;base64,{b64}" download="ResultsRNNnonCriticalwater_data.csv" style="color: orange;">Click here to download the file CSV</a>'
                        return href

                    st.markdown(download_csv(), unsafe_allow_html=True)
                    # water
                    plot_axWNCR_only.plot(dates, y_pred[:,0],color='green')
                    plot_axWNCR_only.legend()
                    plot_axWNCR_only.set_xlabel("Date")
                    plot_axWNCR_only.set_ylabel("Production rate (l/h) ")
                    st.title("Water production rate profile")
                    st.pyplot(plot_figWNCR_only)
                        # Enregistrement du plot dans un fichier PDF
                    def save_plot_to_pdf():
                        with pdf_backend.PdfPages("plot.pdf") as pdf:
                            pdf.savefig(plot_figWNCR_only)
                        with open("plot.pdf", "rb") as file:
                            b64 = base64.b64encode(file.read()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="PlotRNNnonCriticalwater.pdf" style="color: orange;">Download the PDF file</a>'
                        return href

                    st.markdown(save_plot_to_pdf(), unsafe_allow_html=True)